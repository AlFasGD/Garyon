using Garyon.Attributes;
using Garyon.Functions.PointerHelpers;
using System;
using System.Runtime.CompilerServices;

namespace Garyon.Extensions.ArrayExtensions.ArrayConverting
{
    /// <summary>Provides extensions for converting an array's values and creating a new array containing the results.</summary>
    public static class ArrayConvertingExtensions
    {
        #region CopyToNumericalArray
        // Behold 32 overloads for each possible array rank that does not crash the compiler, I feel sorry for you
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[] to a new <typeparamref name="TTo"/>[] and returns the <typeparamref name="TTo"/>[].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe TTo[] CopyToNumericalArray<TFrom, TTo>(this TFrom[] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var result = new TTo[length];

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,] and returns the <typeparamref name="TTo"/>[,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,] and returns the <typeparamref name="TTo"/>[,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,] and returns the <typeparamref name="TTo"/>[,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,,] and returns the <typeparamref name="TTo"/>[,,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,,,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,,,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,,,,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,,,,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,,,,,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,,,,,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,,,,,,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,,,,,,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,,,,,,,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,,,,,,,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,,,,,,,,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,,,,,,,,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,,,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,,,,,,,,,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,,,,,,,,,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,,,,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,,,,,,,,,,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,,,,,,,,,,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,,,,,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        /// <summary>Copies all the numerical elements of the <typeparamref name="TFrom"/>[,,,] to a new <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] and returns the <typeparamref name="TTo"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,].</summary>
        /// <typeparam name="TFrom">The numerical type of the elements in the original array.</typeparam>
        /// <typeparam name="TTo">The numerical type of the elements in the new array.</typeparam>
        /// <param name="a">The <typeparamref name="TFrom"/>[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] whose elements to copy.</param>
        /// <returns>The resulting array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Autogenerated]
        public static unsafe TTo[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] CopyToNumericalArray<TFrom, TTo>(this TFrom[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,] a)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            uint length = (uint)a.Length;
            var lengths = a.GetDimensionLengths();
            var result = (TTo[,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,])Array.CreateInstance(typeof(TTo), lengths);

            fixed (TFrom* origin = a)
            fixed (TTo* target = result)
                CopyTo(origin, target, length);

            return result;
        }
        #endregion

        private static unsafe void CopyTo<TFrom, TTo>(TFrom* origin, TTo* target, uint length)
            where TFrom : unmanaged
            where TTo : unmanaged
        {
            if (SIMDPointerConversion.CopyToArrayVector256Generic(origin, target, length))
                return;

            if (SIMDPointerConversion.CopyToArrayVector128Generic(origin, target, length))
                return;

            PointerConversion.ConvertTo(origin, target, length);
        }
    }
}
