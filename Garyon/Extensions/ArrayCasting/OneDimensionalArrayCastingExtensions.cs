using Garyon.Attributes;
using System;
using System.Runtime.CompilerServices;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;

namespace Garyon.Extensions.ArrayCasting
{
    /// <summary>Provides array casting extensions for one-dimensional arrays.</summary>
    [Autogenerated]
    public static class OneDimensionalArrayCastingExtensions
    {
        #region Byte[] -> T[]
        /// <summary>Casts all the elements of the <seealso cref="byte"/>[] to <seealso cref="short"/> and returns the <seealso cref="short"/>[].</summary>
        /// <param name="a">The <seealso cref="byte"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="short"/>[] with the cast elements.</returns>
        public static short[] CastToInt16Array(this byte[] a)
        {
            var result = new short[a.Length];
            unsafe
            {
                ArrayCopyingExtensions.CopyTo(a.GetPointer(), result.GetPointer(), (uint)a.Length);
            }
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="byte"/>[] to <seealso cref="int"/> and returns the <seealso cref="int"/>[].</summary>
        /// <param name="a">The <seealso cref="byte"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="int"/>[] with the cast elements.</returns>
        public static int[] CastToInt32Array(this byte[] a)
        {
            var result = new int[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="byte"/>[] to <seealso cref="long"/> and returns the <seealso cref="long"/>[].</summary>
        /// <param name="a">The <seealso cref="byte"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="long"/>[] with the cast elements.</returns>
        public static long[] CastToInt64Array(this byte[] a)
        {
            var result = new long[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (long)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="byte"/>[] to <seealso cref="sbyte"/> and returns the <seealso cref="sbyte"/>[].</summary>
        /// <param name="a">The <seealso cref="byte"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="sbyte"/>[] with the cast elements.</returns>
        public static sbyte[] CastToSByteArray(this byte[] a)
        {
            var result = new sbyte[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (sbyte)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="byte"/>[] to <seealso cref="ushort"/> and returns the <seealso cref="ushort"/>[].</summary>
        /// <param name="a">The <seealso cref="byte"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="ushort"/>[] with the cast elements.</returns>
        public static ushort[] CastToUInt16Array(this byte[] a)
        {
            var result = new ushort[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (ushort)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="byte"/>[] to <seealso cref="uint"/> and returns the <seealso cref="uint"/>[].</summary>
        /// <param name="a">The <seealso cref="byte"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="uint"/>[] with the cast elements.</returns>
        public static uint[] CastToUInt32Array(this byte[] a)
        {
            var result = new uint[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (uint)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="byte"/>[] to <seealso cref="ulong"/> and returns the <seealso cref="ulong"/>[].</summary>
        /// <param name="a">The <seealso cref="byte"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="ulong"/>[] with the cast elements.</returns>
        public static ulong[] CastToUInt64Array(this byte[] a)
        {
            var result = new ulong[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (ulong)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="byte"/>[] to <seealso cref="float"/> and returns the <seealso cref="float"/>[].</summary>
        /// <param name="a">The <seealso cref="byte"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="float"/>[] with the cast elements.</returns>
        public static float[] CastToSingleArray(this byte[] a)
        {
            var result = new float[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="byte"/>[] to <seealso cref="double"/> and returns the <seealso cref="double"/>[].</summary>
        /// <param name="a">The <seealso cref="byte"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="double"/>[] with the cast elements.</returns>
        public static double[] CastToDoubleArray(this byte[] a)
        {
            var result = new double[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="byte"/>[] to <seealso cref="decimal"/> and returns the <seealso cref="decimal"/>[].</summary>
        /// <param name="a">The <seealso cref="byte"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="decimal"/>[] with the cast elements.</returns>
        public static decimal[] CastToDecimalArray(this byte[] a)
        {
            var result = new decimal[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (decimal)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="byte"/>[] to <seealso cref="char"/> and returns the <seealso cref="char"/>[].</summary>
        /// <param name="a">The <seealso cref="byte"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="char"/>[] with the cast elements.</returns>
        public static char[] CastToCharArray(this byte[] a)
        {
            var result = new char[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (char)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="byte"/>[] to <seealso cref="bool"/> and returns the <seealso cref="bool"/>[].</summary>
        /// <param name="a">The <seealso cref="byte"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="bool"/>[] with the cast elements.</returns>
        public static bool[] CastToBooleanArray(this byte[] a)
        {
            var result = new bool[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = a[i] != 0;
            return result;
        }
        #endregion
        
        #region Int16[] -> T[]
        /// <summary>Casts all the elements of the <seealso cref="short"/>[] to <seealso cref="byte"/> and returns the <seealso cref="byte"/>[].</summary>
        /// <param name="a">The <seealso cref="short"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="byte"/>[] with the cast elements.</returns>
        public static byte[] CastToByteArray(this short[] a)
        {
            var result = new byte[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (byte)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="short"/>[] to <seealso cref="int"/> and returns the <seealso cref="int"/>[].</summary>
        /// <param name="a">The <seealso cref="short"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="int"/>[] with the cast elements.</returns>
        public static int[] CastToInt32Array(this short[] a)
        {
            var result = new int[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="short"/>[] to <seealso cref="long"/> and returns the <seealso cref="long"/>[].</summary>
        /// <param name="a">The <seealso cref="short"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="long"/>[] with the cast elements.</returns>
        public static long[] CastToInt64Array(this short[] a)
        {
            var result = new long[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (long)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="short"/>[] to <seealso cref="sbyte"/> and returns the <seealso cref="sbyte"/>[].</summary>
        /// <param name="a">The <seealso cref="short"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="sbyte"/>[] with the cast elements.</returns>
        public static sbyte[] CastToSByteArray(this short[] a)
        {
            var result = new sbyte[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (sbyte)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="short"/>[] to <seealso cref="ushort"/> and returns the <seealso cref="ushort"/>[].</summary>
        /// <param name="a">The <seealso cref="short"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="ushort"/>[] with the cast elements.</returns>
        public static ushort[] CastToUInt16Array(this short[] a)
        {
            var result = new ushort[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (ushort)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="short"/>[] to <seealso cref="uint"/> and returns the <seealso cref="uint"/>[].</summary>
        /// <param name="a">The <seealso cref="short"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="uint"/>[] with the cast elements.</returns>
        public static uint[] CastToUInt32Array(this short[] a)
        {
            var result = new uint[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (uint)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="short"/>[] to <seealso cref="ulong"/> and returns the <seealso cref="ulong"/>[].</summary>
        /// <param name="a">The <seealso cref="short"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="ulong"/>[] with the cast elements.</returns>
        public static ulong[] CastToUInt64Array(this short[] a)
        {
            var result = new ulong[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (ulong)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="short"/>[] to <seealso cref="float"/> and returns the <seealso cref="float"/>[].</summary>
        /// <param name="a">The <seealso cref="short"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="float"/>[] with the cast elements.</returns>
        public static float[] CastToSingleArray(this short[] a)
        {
            var result = new float[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="short"/>[] to <seealso cref="double"/> and returns the <seealso cref="double"/>[].</summary>
        /// <param name="a">The <seealso cref="short"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="double"/>[] with the cast elements.</returns>
        public static double[] CastToDoubleArray(this short[] a)
        {
            var result = new double[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="short"/>[] to <seealso cref="decimal"/> and returns the <seealso cref="decimal"/>[].</summary>
        /// <param name="a">The <seealso cref="short"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="decimal"/>[] with the cast elements.</returns>
        public static decimal[] CastToDecimalArray(this short[] a)
        {
            var result = new decimal[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (decimal)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="short"/>[] to <seealso cref="char"/> and returns the <seealso cref="char"/>[].</summary>
        /// <param name="a">The <seealso cref="short"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="char"/>[] with the cast elements.</returns>
        public static char[] CastToCharArray(this short[] a)
        {
            var result = new char[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (char)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="short"/>[] to <seealso cref="bool"/> and returns the <seealso cref="bool"/>[].</summary>
        /// <param name="a">The <seealso cref="short"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="bool"/>[] with the cast elements.</returns>
        public static bool[] CastToBooleanArray(this short[] a)
        {
            var result = new bool[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = a[i] != 0;
            return result;
        }
        #endregion
        
        #region Int32[] -> T[]
        /// <summary>Casts all the elements of the <seealso cref="int"/>[] to <seealso cref="byte"/> and returns the <seealso cref="byte"/>[].</summary>
        /// <param name="a">The <seealso cref="int"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="byte"/>[] with the cast elements.</returns>
        public static byte[] CastToByteArray(this int[] a)
        {
            var result = new byte[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (byte)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="int"/>[] to <seealso cref="short"/> and returns the <seealso cref="short"/>[].</summary>
        /// <param name="a">The <seealso cref="int"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="short"/>[] with the cast elements.</returns>
        public static short[] CastToInt16Array(this int[] a)
        {
            var result = new short[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="int"/>[] to <seealso cref="long"/> and returns the <seealso cref="long"/>[].</summary>
        /// <param name="a">The <seealso cref="int"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="long"/>[] with the cast elements.</returns>
        public static long[] CastToInt64Array(this int[] a)
        {
            var result = new long[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (long)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="int"/>[] to <seealso cref="sbyte"/> and returns the <seealso cref="sbyte"/>[].</summary>
        /// <param name="a">The <seealso cref="int"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="sbyte"/>[] with the cast elements.</returns>
        public static sbyte[] CastToSByteArray(this int[] a)
        {
            var result = new sbyte[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (sbyte)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="int"/>[] to <seealso cref="ushort"/> and returns the <seealso cref="ushort"/>[].</summary>
        /// <param name="a">The <seealso cref="int"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="ushort"/>[] with the cast elements.</returns>
        public static ushort[] CastToUInt16Array(this int[] a)
        {
            var result = new ushort[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (ushort)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="int"/>[] to <seealso cref="uint"/> and returns the <seealso cref="uint"/>[].</summary>
        /// <param name="a">The <seealso cref="int"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="uint"/>[] with the cast elements.</returns>
        public static uint[] CastToUInt32Array(this int[] a)
        {
            var result = new uint[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (uint)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="int"/>[] to <seealso cref="ulong"/> and returns the <seealso cref="ulong"/>[].</summary>
        /// <param name="a">The <seealso cref="int"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="ulong"/>[] with the cast elements.</returns>
        public static ulong[] CastToUInt64Array(this int[] a)
        {
            var result = new ulong[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (ulong)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="int"/>[] to <seealso cref="float"/> and returns the <seealso cref="float"/>[].</summary>
        /// <param name="a">The <seealso cref="int"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="float"/>[] with the cast elements.</returns>
        public static float[] CastToSingleArray(this int[] a)
        {
            var result = new float[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="int"/>[] to <seealso cref="double"/> and returns the <seealso cref="double"/>[].</summary>
        /// <param name="a">The <seealso cref="int"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="double"/>[] with the cast elements.</returns>
        public static double[] CastToDoubleArray(this int[] a)
        {
            var result = new double[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="int"/>[] to <seealso cref="decimal"/> and returns the <seealso cref="decimal"/>[].</summary>
        /// <param name="a">The <seealso cref="int"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="decimal"/>[] with the cast elements.</returns>
        public static decimal[] CastToDecimalArray(this int[] a)
        {
            var result = new decimal[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (decimal)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="int"/>[] to <seealso cref="char"/> and returns the <seealso cref="char"/>[].</summary>
        /// <param name="a">The <seealso cref="int"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="char"/>[] with the cast elements.</returns>
        public static char[] CastToCharArray(this int[] a)
        {
            var result = new char[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (char)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="int"/>[] to <seealso cref="bool"/> and returns the <seealso cref="bool"/>[].</summary>
        /// <param name="a">The <seealso cref="int"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="bool"/>[] with the cast elements.</returns>
        public static bool[] CastToBooleanArray(this int[] a)
        {
            var result = new bool[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = a[i] != 0;
            return result;
        }
        #endregion
        
        #region Int64[] -> T[]
        /// <summary>Casts all the elements of the <seealso cref="long"/>[] to <seealso cref="byte"/> and returns the <seealso cref="byte"/>[].</summary>
        /// <param name="a">The <seealso cref="long"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="byte"/>[] with the cast elements.</returns>
        public static byte[] CastToByteArray(this long[] a)
        {
            var result = new byte[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (byte)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="long"/>[] to <seealso cref="short"/> and returns the <seealso cref="short"/>[].</summary>
        /// <param name="a">The <seealso cref="long"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="short"/>[] with the cast elements.</returns>
        public static short[] CastToInt16Array(this long[] a)
        {
            var result = new short[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="long"/>[] to <seealso cref="int"/> and returns the <seealso cref="int"/>[].</summary>
        /// <param name="a">The <seealso cref="long"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="int"/>[] with the cast elements.</returns>
        public static int[] CastToInt32Array(this long[] a)
        {
            var result = new int[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="long"/>[] to <seealso cref="sbyte"/> and returns the <seealso cref="sbyte"/>[].</summary>
        /// <param name="a">The <seealso cref="long"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="sbyte"/>[] with the cast elements.</returns>
        public static sbyte[] CastToSByteArray(this long[] a)
        {
            var result = new sbyte[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (sbyte)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="long"/>[] to <seealso cref="ushort"/> and returns the <seealso cref="ushort"/>[].</summary>
        /// <param name="a">The <seealso cref="long"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="ushort"/>[] with the cast elements.</returns>
        public static ushort[] CastToUInt16Array(this long[] a)
        {
            var result = new ushort[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (ushort)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="long"/>[] to <seealso cref="uint"/> and returns the <seealso cref="uint"/>[].</summary>
        /// <param name="a">The <seealso cref="long"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="uint"/>[] with the cast elements.</returns>
        public static uint[] CastToUInt32Array(this long[] a)
        {
            var result = new uint[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (uint)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="long"/>[] to <seealso cref="ulong"/> and returns the <seealso cref="ulong"/>[].</summary>
        /// <param name="a">The <seealso cref="long"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="ulong"/>[] with the cast elements.</returns>
        public static ulong[] CastToUInt64Array(this long[] a)
        {
            var result = new ulong[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (ulong)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="long"/>[] to <seealso cref="float"/> and returns the <seealso cref="float"/>[].</summary>
        /// <param name="a">The <seealso cref="long"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="float"/>[] with the cast elements.</returns>
        public static float[] CastToSingleArray(this long[] a)
        {
            var result = new float[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="long"/>[] to <seealso cref="double"/> and returns the <seealso cref="double"/>[].</summary>
        /// <param name="a">The <seealso cref="long"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="double"/>[] with the cast elements.</returns>
        public static double[] CastToDoubleArray(this long[] a)
        {
            var result = new double[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="long"/>[] to <seealso cref="decimal"/> and returns the <seealso cref="decimal"/>[].</summary>
        /// <param name="a">The <seealso cref="long"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="decimal"/>[] with the cast elements.</returns>
        public static decimal[] CastToDecimalArray(this long[] a)
        {
            var result = new decimal[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (decimal)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="long"/>[] to <seealso cref="char"/> and returns the <seealso cref="char"/>[].</summary>
        /// <param name="a">The <seealso cref="long"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="char"/>[] with the cast elements.</returns>
        public static char[] CastToCharArray(this long[] a)
        {
            var result = new char[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (char)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="long"/>[] to <seealso cref="bool"/> and returns the <seealso cref="bool"/>[].</summary>
        /// <param name="a">The <seealso cref="long"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="bool"/>[] with the cast elements.</returns>
        public static bool[] CastToBooleanArray(this long[] a)
        {
            var result = new bool[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = a[i] != 0;
            return result;
        }
        #endregion
        
        #region SByte[] -> T[]
        /// <summary>Casts all the elements of the <seealso cref="sbyte"/>[] to <seealso cref="byte"/> and returns the <seealso cref="byte"/>[].</summary>
        /// <param name="a">The <seealso cref="sbyte"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="byte"/>[] with the cast elements.</returns>
        public static byte[] CastToByteArray(this sbyte[] a)
        {
            var result = new byte[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (byte)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="sbyte"/>[] to <seealso cref="short"/> and returns the <seealso cref="short"/>[].</summary>
        /// <param name="a">The <seealso cref="sbyte"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="short"/>[] with the cast elements.</returns>
        public static short[] CastToInt16Array(this sbyte[] a)
        {
            var result = new short[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="sbyte"/>[] to <seealso cref="int"/> and returns the <seealso cref="int"/>[].</summary>
        /// <param name="a">The <seealso cref="sbyte"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="int"/>[] with the cast elements.</returns>
        public static int[] CastToInt32Array(this sbyte[] a)
        {
            var result = new int[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="sbyte"/>[] to <seealso cref="long"/> and returns the <seealso cref="long"/>[].</summary>
        /// <param name="a">The <seealso cref="sbyte"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="long"/>[] with the cast elements.</returns>
        public static long[] CastToInt64Array(this sbyte[] a)
        {
            var result = new long[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (long)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="sbyte"/>[] to <seealso cref="ushort"/> and returns the <seealso cref="ushort"/>[].</summary>
        /// <param name="a">The <seealso cref="sbyte"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="ushort"/>[] with the cast elements.</returns>
        public static ushort[] CastToUInt16Array(this sbyte[] a)
        {
            var result = new ushort[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (ushort)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="sbyte"/>[] to <seealso cref="uint"/> and returns the <seealso cref="uint"/>[].</summary>
        /// <param name="a">The <seealso cref="sbyte"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="uint"/>[] with the cast elements.</returns>
        public static uint[] CastToUInt32Array(this sbyte[] a)
        {
            var result = new uint[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (uint)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="sbyte"/>[] to <seealso cref="ulong"/> and returns the <seealso cref="ulong"/>[].</summary>
        /// <param name="a">The <seealso cref="sbyte"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="ulong"/>[] with the cast elements.</returns>
        public static ulong[] CastToUInt64Array(this sbyte[] a)
        {
            var result = new ulong[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (ulong)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="sbyte"/>[] to <seealso cref="float"/> and returns the <seealso cref="float"/>[].</summary>
        /// <param name="a">The <seealso cref="sbyte"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="float"/>[] with the cast elements.</returns>
        public static float[] CastToSingleArray(this sbyte[] a)
        {
            var result = new float[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="sbyte"/>[] to <seealso cref="double"/> and returns the <seealso cref="double"/>[].</summary>
        /// <param name="a">The <seealso cref="sbyte"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="double"/>[] with the cast elements.</returns>
        public static double[] CastToDoubleArray(this sbyte[] a)
        {
            var result = new double[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="sbyte"/>[] to <seealso cref="decimal"/> and returns the <seealso cref="decimal"/>[].</summary>
        /// <param name="a">The <seealso cref="sbyte"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="decimal"/>[] with the cast elements.</returns>
        public static decimal[] CastToDecimalArray(this sbyte[] a)
        {
            var result = new decimal[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (decimal)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="sbyte"/>[] to <seealso cref="char"/> and returns the <seealso cref="char"/>[].</summary>
        /// <param name="a">The <seealso cref="sbyte"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="char"/>[] with the cast elements.</returns>
        public static char[] CastToCharArray(this sbyte[] a)
        {
            var result = new char[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (char)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="sbyte"/>[] to <seealso cref="bool"/> and returns the <seealso cref="bool"/>[].</summary>
        /// <param name="a">The <seealso cref="sbyte"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="bool"/>[] with the cast elements.</returns>
        public static bool[] CastToBooleanArray(this sbyte[] a)
        {
            var result = new bool[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = a[i] != 0;
            return result;
        }
        #endregion
        
        #region UInt16[] -> T[]
        /// <summary>Casts all the elements of the <seealso cref="ushort"/>[] to <seealso cref="byte"/> and returns the <seealso cref="byte"/>[].</summary>
        /// <param name="a">The <seealso cref="ushort"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="byte"/>[] with the cast elements.</returns>
        public static byte[] CastToByteArray(this ushort[] a)
        {
            var result = new byte[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (byte)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ushort"/>[] to <seealso cref="short"/> and returns the <seealso cref="short"/>[].</summary>
        /// <param name="a">The <seealso cref="ushort"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="short"/>[] with the cast elements.</returns>
        public static short[] CastToInt16Array(this ushort[] a)
        {
            var result = new short[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ushort"/>[] to <seealso cref="int"/> and returns the <seealso cref="int"/>[].</summary>
        /// <param name="a">The <seealso cref="ushort"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="int"/>[] with the cast elements.</returns>
        public static int[] CastToInt32Array(this ushort[] a)
        {
            var result = new int[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ushort"/>[] to <seealso cref="long"/> and returns the <seealso cref="long"/>[].</summary>
        /// <param name="a">The <seealso cref="ushort"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="long"/>[] with the cast elements.</returns>
        public static long[] CastToInt64Array(this ushort[] a)
        {
            var result = new long[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (long)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ushort"/>[] to <seealso cref="sbyte"/> and returns the <seealso cref="sbyte"/>[].</summary>
        /// <param name="a">The <seealso cref="ushort"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="sbyte"/>[] with the cast elements.</returns>
        public static sbyte[] CastToSByteArray(this ushort[] a)
        {
            var result = new sbyte[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (sbyte)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ushort"/>[] to <seealso cref="uint"/> and returns the <seealso cref="uint"/>[].</summary>
        /// <param name="a">The <seealso cref="ushort"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="uint"/>[] with the cast elements.</returns>
        public static uint[] CastToUInt32Array(this ushort[] a)
        {
            var result = new uint[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (uint)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ushort"/>[] to <seealso cref="ulong"/> and returns the <seealso cref="ulong"/>[].</summary>
        /// <param name="a">The <seealso cref="ushort"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="ulong"/>[] with the cast elements.</returns>
        public static ulong[] CastToUInt64Array(this ushort[] a)
        {
            var result = new ulong[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (ulong)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ushort"/>[] to <seealso cref="float"/> and returns the <seealso cref="float"/>[].</summary>
        /// <param name="a">The <seealso cref="ushort"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="float"/>[] with the cast elements.</returns>
        public static float[] CastToSingleArray(this ushort[] a)
        {
            var result = new float[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ushort"/>[] to <seealso cref="double"/> and returns the <seealso cref="double"/>[].</summary>
        /// <param name="a">The <seealso cref="ushort"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="double"/>[] with the cast elements.</returns>
        public static double[] CastToDoubleArray(this ushort[] a)
        {
            var result = new double[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ushort"/>[] to <seealso cref="decimal"/> and returns the <seealso cref="decimal"/>[].</summary>
        /// <param name="a">The <seealso cref="ushort"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="decimal"/>[] with the cast elements.</returns>
        public static decimal[] CastToDecimalArray(this ushort[] a)
        {
            var result = new decimal[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (decimal)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ushort"/>[] to <seealso cref="char"/> and returns the <seealso cref="char"/>[].</summary>
        /// <param name="a">The <seealso cref="ushort"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="char"/>[] with the cast elements.</returns>
        public static char[] CastToCharArray(this ushort[] a)
        {
            var result = new char[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (char)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ushort"/>[] to <seealso cref="bool"/> and returns the <seealso cref="bool"/>[].</summary>
        /// <param name="a">The <seealso cref="ushort"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="bool"/>[] with the cast elements.</returns>
        public static bool[] CastToBooleanArray(this ushort[] a)
        {
            var result = new bool[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = a[i] != 0;
            return result;
        }
        #endregion
        
        #region UInt32[] -> T[]
        /// <summary>Casts all the elements of the <seealso cref="uint"/>[] to <seealso cref="byte"/> and returns the <seealso cref="byte"/>[].</summary>
        /// <param name="a">The <seealso cref="uint"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="byte"/>[] with the cast elements.</returns>
        public static byte[] CastToByteArray(this uint[] a)
        {
            var result = new byte[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (byte)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="uint"/>[] to <seealso cref="short"/> and returns the <seealso cref="short"/>[].</summary>
        /// <param name="a">The <seealso cref="uint"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="short"/>[] with the cast elements.</returns>
        public static short[] CastToInt16Array(this uint[] a)
        {
            var result = new short[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="uint"/>[] to <seealso cref="int"/> and returns the <seealso cref="int"/>[].</summary>
        /// <param name="a">The <seealso cref="uint"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="int"/>[] with the cast elements.</returns>
        public static int[] CastToInt32Array(this uint[] a)
        {
            var result = new int[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="uint"/>[] to <seealso cref="long"/> and returns the <seealso cref="long"/>[].</summary>
        /// <param name="a">The <seealso cref="uint"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="long"/>[] with the cast elements.</returns>
        public static long[] CastToInt64Array(this uint[] a)
        {
            var result = new long[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (long)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="uint"/>[] to <seealso cref="sbyte"/> and returns the <seealso cref="sbyte"/>[].</summary>
        /// <param name="a">The <seealso cref="uint"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="sbyte"/>[] with the cast elements.</returns>
        public static sbyte[] CastToSByteArray(this uint[] a)
        {
            var result = new sbyte[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (sbyte)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="uint"/>[] to <seealso cref="ushort"/> and returns the <seealso cref="ushort"/>[].</summary>
        /// <param name="a">The <seealso cref="uint"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="ushort"/>[] with the cast elements.</returns>
        public static ushort[] CastToUInt16Array(this uint[] a)
        {
            var result = new ushort[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (ushort)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="uint"/>[] to <seealso cref="ulong"/> and returns the <seealso cref="ulong"/>[].</summary>
        /// <param name="a">The <seealso cref="uint"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="ulong"/>[] with the cast elements.</returns>
        public static ulong[] CastToUInt64Array(this uint[] a)
        {
            var result = new ulong[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (ulong)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="uint"/>[] to <seealso cref="float"/> and returns the <seealso cref="float"/>[].</summary>
        /// <param name="a">The <seealso cref="uint"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="float"/>[] with the cast elements.</returns>
        public static float[] CastToSingleArray(this uint[] a)
        {
            var result = new float[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="uint"/>[] to <seealso cref="double"/> and returns the <seealso cref="double"/>[].</summary>
        /// <param name="a">The <seealso cref="uint"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="double"/>[] with the cast elements.</returns>
        public static double[] CastToDoubleArray(this uint[] a)
        {
            var result = new double[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="uint"/>[] to <seealso cref="decimal"/> and returns the <seealso cref="decimal"/>[].</summary>
        /// <param name="a">The <seealso cref="uint"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="decimal"/>[] with the cast elements.</returns>
        public static decimal[] CastToDecimalArray(this uint[] a)
        {
            var result = new decimal[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (decimal)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="uint"/>[] to <seealso cref="char"/> and returns the <seealso cref="char"/>[].</summary>
        /// <param name="a">The <seealso cref="uint"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="char"/>[] with the cast elements.</returns>
        public static char[] CastToCharArray(this uint[] a)
        {
            var result = new char[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (char)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="uint"/>[] to <seealso cref="bool"/> and returns the <seealso cref="bool"/>[].</summary>
        /// <param name="a">The <seealso cref="uint"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="bool"/>[] with the cast elements.</returns>
        public static bool[] CastToBooleanArray(this uint[] a)
        {
            var result = new bool[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = a[i] != 0;
            return result;
        }
        #endregion
        
        #region UInt64[] -> T[]
        /// <summary>Casts all the elements of the <seealso cref="ulong"/>[] to <seealso cref="byte"/> and returns the <seealso cref="byte"/>[].</summary>
        /// <param name="a">The <seealso cref="ulong"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="byte"/>[] with the cast elements.</returns>
        public static byte[] CastToByteArray(this ulong[] a)
        {
            var result = new byte[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (byte)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ulong"/>[] to <seealso cref="short"/> and returns the <seealso cref="short"/>[].</summary>
        /// <param name="a">The <seealso cref="ulong"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="short"/>[] with the cast elements.</returns>
        public static short[] CastToInt16Array(this ulong[] a)
        {
            var result = new short[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ulong"/>[] to <seealso cref="int"/> and returns the <seealso cref="int"/>[].</summary>
        /// <param name="a">The <seealso cref="ulong"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="int"/>[] with the cast elements.</returns>
        public static int[] CastToInt32Array(this ulong[] a)
        {
            var result = new int[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ulong"/>[] to <seealso cref="long"/> and returns the <seealso cref="long"/>[].</summary>
        /// <param name="a">The <seealso cref="ulong"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="long"/>[] with the cast elements.</returns>
        public static long[] CastToInt64Array(this ulong[] a)
        {
            var result = new long[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (long)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ulong"/>[] to <seealso cref="sbyte"/> and returns the <seealso cref="sbyte"/>[].</summary>
        /// <param name="a">The <seealso cref="ulong"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="sbyte"/>[] with the cast elements.</returns>
        public static sbyte[] CastToSByteArray(this ulong[] a)
        {
            var result = new sbyte[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (sbyte)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ulong"/>[] to <seealso cref="ushort"/> and returns the <seealso cref="ushort"/>[].</summary>
        /// <param name="a">The <seealso cref="ulong"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="ushort"/>[] with the cast elements.</returns>
        public static ushort[] CastToUInt16Array(this ulong[] a)
        {
            var result = new ushort[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (ushort)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ulong"/>[] to <seealso cref="uint"/> and returns the <seealso cref="uint"/>[].</summary>
        /// <param name="a">The <seealso cref="ulong"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="uint"/>[] with the cast elements.</returns>
        public static uint[] CastToUInt32Array(this ulong[] a)
        {
            var result = new uint[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (uint)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ulong"/>[] to <seealso cref="float"/> and returns the <seealso cref="float"/>[].</summary>
        /// <param name="a">The <seealso cref="ulong"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="float"/>[] with the cast elements.</returns>
        public static float[] CastToSingleArray(this ulong[] a)
        {
            var result = new float[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ulong"/>[] to <seealso cref="double"/> and returns the <seealso cref="double"/>[].</summary>
        /// <param name="a">The <seealso cref="ulong"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="double"/>[] with the cast elements.</returns>
        public static double[] CastToDoubleArray(this ulong[] a)
        {
            var result = new double[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ulong"/>[] to <seealso cref="decimal"/> and returns the <seealso cref="decimal"/>[].</summary>
        /// <param name="a">The <seealso cref="ulong"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="decimal"/>[] with the cast elements.</returns>
        public static decimal[] CastToDecimalArray(this ulong[] a)
        {
            var result = new decimal[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (decimal)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ulong"/>[] to <seealso cref="char"/> and returns the <seealso cref="char"/>[].</summary>
        /// <param name="a">The <seealso cref="ulong"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="char"/>[] with the cast elements.</returns>
        public static char[] CastToCharArray(this ulong[] a)
        {
            var result = new char[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (char)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ulong"/>[] to <seealso cref="bool"/> and returns the <seealso cref="bool"/>[].</summary>
        /// <param name="a">The <seealso cref="ulong"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="bool"/>[] with the cast elements.</returns>
        public static bool[] CastToBooleanArray(this ulong[] a)
        {
            var result = new bool[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = a[i] != 0;
            return result;
        }
        #endregion
        
        #region Single[] -> T[]
        /// <summary>Casts all the elements of the <seealso cref="float"/>[] to <seealso cref="byte"/> and returns the <seealso cref="byte"/>[].</summary>
        /// <param name="a">The <seealso cref="float"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="byte"/>[] with the cast elements.</returns>
        public static byte[] CastToByteArray(this float[] a)
        {
            var result = new byte[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (byte)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="float"/>[] to <seealso cref="short"/> and returns the <seealso cref="short"/>[].</summary>
        /// <param name="a">The <seealso cref="float"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="short"/>[] with the cast elements.</returns>
        public static short[] CastToInt16Array(this float[] a)
        {
            var result = new short[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="float"/>[] to <seealso cref="int"/> and returns the <seealso cref="int"/>[].</summary>
        /// <param name="a">The <seealso cref="float"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="int"/>[] with the cast elements.</returns>
        public static int[] CastToInt32Array(this float[] a)
        {
            var result = new int[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="float"/>[] to <seealso cref="long"/> and returns the <seealso cref="long"/>[].</summary>
        /// <param name="a">The <seealso cref="float"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="long"/>[] with the cast elements.</returns>
        public static long[] CastToInt64Array(this float[] a)
        {
            var result = new long[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (long)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="float"/>[] to <seealso cref="sbyte"/> and returns the <seealso cref="sbyte"/>[].</summary>
        /// <param name="a">The <seealso cref="float"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="sbyte"/>[] with the cast elements.</returns>
        public static sbyte[] CastToSByteArray(this float[] a)
        {
            var result = new sbyte[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (sbyte)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="float"/>[] to <seealso cref="ushort"/> and returns the <seealso cref="ushort"/>[].</summary>
        /// <param name="a">The <seealso cref="float"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="ushort"/>[] with the cast elements.</returns>
        public static ushort[] CastToUInt16Array(this float[] a)
        {
            var result = new ushort[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (ushort)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="float"/>[] to <seealso cref="uint"/> and returns the <seealso cref="uint"/>[].</summary>
        /// <param name="a">The <seealso cref="float"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="uint"/>[] with the cast elements.</returns>
        public static uint[] CastToUInt32Array(this float[] a)
        {
            var result = new uint[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (uint)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="float"/>[] to <seealso cref="ulong"/> and returns the <seealso cref="ulong"/>[].</summary>
        /// <param name="a">The <seealso cref="float"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="ulong"/>[] with the cast elements.</returns>
        public static ulong[] CastToUInt64Array(this float[] a)
        {
            var result = new ulong[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (ulong)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="float"/>[] to <seealso cref="double"/> and returns the <seealso cref="double"/>[].</summary>
        /// <param name="a">The <seealso cref="float"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="double"/>[] with the cast elements.</returns>
        public static double[] CastToDoubleArray(this float[] a)
        {
            var result = new double[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="float"/>[] to <seealso cref="decimal"/> and returns the <seealso cref="decimal"/>[].</summary>
        /// <param name="a">The <seealso cref="float"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="decimal"/>[] with the cast elements.</returns>
        public static decimal[] CastToDecimalArray(this float[] a)
        {
            var result = new decimal[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (decimal)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="float"/>[] to <seealso cref="char"/> and returns the <seealso cref="char"/>[].</summary>
        /// <param name="a">The <seealso cref="float"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="char"/>[] with the cast elements.</returns>
        public static char[] CastToCharArray(this float[] a)
        {
            var result = new char[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (char)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="float"/>[] to <seealso cref="bool"/> and returns the <seealso cref="bool"/>[].</summary>
        /// <param name="a">The <seealso cref="float"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="bool"/>[] with the cast elements.</returns>
        public static bool[] CastToBooleanArray(this float[] a)
        {
            var result = new bool[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = a[i] != 0;
            return result;
        }
        #endregion
        
        #region Double[] -> T[]
        /// <summary>Casts all the elements of the <seealso cref="double"/>[] to <seealso cref="byte"/> and returns the <seealso cref="byte"/>[].</summary>
        /// <param name="a">The <seealso cref="double"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="byte"/>[] with the cast elements.</returns>
        public static byte[] CastToByteArray(this double[] a)
        {
            var result = new byte[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (byte)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="double"/>[] to <seealso cref="short"/> and returns the <seealso cref="short"/>[].</summary>
        /// <param name="a">The <seealso cref="double"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="short"/>[] with the cast elements.</returns>
        public static short[] CastToInt16Array(this double[] a)
        {
            var result = new short[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="double"/>[] to <seealso cref="int"/> and returns the <seealso cref="int"/>[].</summary>
        /// <param name="a">The <seealso cref="double"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="int"/>[] with the cast elements.</returns>
        public static int[] CastToInt32Array(this double[] a)
        {
            var result = new int[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="double"/>[] to <seealso cref="long"/> and returns the <seealso cref="long"/>[].</summary>
        /// <param name="a">The <seealso cref="double"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="long"/>[] with the cast elements.</returns>
        public static long[] CastToInt64Array(this double[] a)
        {
            var result = new long[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (long)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="double"/>[] to <seealso cref="sbyte"/> and returns the <seealso cref="sbyte"/>[].</summary>
        /// <param name="a">The <seealso cref="double"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="sbyte"/>[] with the cast elements.</returns>
        public static sbyte[] CastToSByteArray(this double[] a)
        {
            var result = new sbyte[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (sbyte)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="double"/>[] to <seealso cref="ushort"/> and returns the <seealso cref="ushort"/>[].</summary>
        /// <param name="a">The <seealso cref="double"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="ushort"/>[] with the cast elements.</returns>
        public static ushort[] CastToUInt16Array(this double[] a)
        {
            var result = new ushort[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (ushort)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="double"/>[] to <seealso cref="uint"/> and returns the <seealso cref="uint"/>[].</summary>
        /// <param name="a">The <seealso cref="double"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="uint"/>[] with the cast elements.</returns>
        public static uint[] CastToUInt32Array(this double[] a)
        {
            var result = new uint[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (uint)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="double"/>[] to <seealso cref="ulong"/> and returns the <seealso cref="ulong"/>[].</summary>
        /// <param name="a">The <seealso cref="double"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="ulong"/>[] with the cast elements.</returns>
        public static ulong[] CastToUInt64Array(this double[] a)
        {
            var result = new ulong[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (ulong)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="double"/>[] to <seealso cref="float"/> and returns the <seealso cref="float"/>[].</summary>
        /// <param name="a">The <seealso cref="double"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="float"/>[] with the cast elements.</returns>
        public static float[] CastToSingleArray(this double[] a)
        {
            var result = new float[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="double"/>[] to <seealso cref="decimal"/> and returns the <seealso cref="decimal"/>[].</summary>
        /// <param name="a">The <seealso cref="double"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="decimal"/>[] with the cast elements.</returns>
        public static decimal[] CastToDecimalArray(this double[] a)
        {
            var result = new decimal[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (decimal)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="double"/>[] to <seealso cref="char"/> and returns the <seealso cref="char"/>[].</summary>
        /// <param name="a">The <seealso cref="double"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="char"/>[] with the cast elements.</returns>
        public static char[] CastToCharArray(this double[] a)
        {
            var result = new char[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (char)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="double"/>[] to <seealso cref="bool"/> and returns the <seealso cref="bool"/>[].</summary>
        /// <param name="a">The <seealso cref="double"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="bool"/>[] with the cast elements.</returns>
        public static bool[] CastToBooleanArray(this double[] a)
        {
            var result = new bool[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = a[i] != 0;
            return result;
        }
        #endregion
        
        #region Decimal[] -> T[]
        /// <summary>Casts all the elements of the <seealso cref="decimal"/>[] to <seealso cref="byte"/> and returns the <seealso cref="byte"/>[].</summary>
        /// <param name="a">The <seealso cref="decimal"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="byte"/>[] with the cast elements.</returns>
        public static byte[] CastToByteArray(this decimal[] a)
        {
            var result = new byte[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (byte)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="decimal"/>[] to <seealso cref="short"/> and returns the <seealso cref="short"/>[].</summary>
        /// <param name="a">The <seealso cref="decimal"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="short"/>[] with the cast elements.</returns>
        public static short[] CastToInt16Array(this decimal[] a)
        {
            var result = new short[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="decimal"/>[] to <seealso cref="int"/> and returns the <seealso cref="int"/>[].</summary>
        /// <param name="a">The <seealso cref="decimal"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="int"/>[] with the cast elements.</returns>
        public static int[] CastToInt32Array(this decimal[] a)
        {
            var result = new int[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="decimal"/>[] to <seealso cref="long"/> and returns the <seealso cref="long"/>[].</summary>
        /// <param name="a">The <seealso cref="decimal"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="long"/>[] with the cast elements.</returns>
        public static long[] CastToInt64Array(this decimal[] a)
        {
            var result = new long[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (long)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="decimal"/>[] to <seealso cref="sbyte"/> and returns the <seealso cref="sbyte"/>[].</summary>
        /// <param name="a">The <seealso cref="decimal"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="sbyte"/>[] with the cast elements.</returns>
        public static sbyte[] CastToSByteArray(this decimal[] a)
        {
            var result = new sbyte[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (sbyte)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="decimal"/>[] to <seealso cref="ushort"/> and returns the <seealso cref="ushort"/>[].</summary>
        /// <param name="a">The <seealso cref="decimal"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="ushort"/>[] with the cast elements.</returns>
        public static ushort[] CastToUInt16Array(this decimal[] a)
        {
            var result = new ushort[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (ushort)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="decimal"/>[] to <seealso cref="uint"/> and returns the <seealso cref="uint"/>[].</summary>
        /// <param name="a">The <seealso cref="decimal"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="uint"/>[] with the cast elements.</returns>
        public static uint[] CastToUInt32Array(this decimal[] a)
        {
            var result = new uint[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (uint)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="decimal"/>[] to <seealso cref="ulong"/> and returns the <seealso cref="ulong"/>[].</summary>
        /// <param name="a">The <seealso cref="decimal"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="ulong"/>[] with the cast elements.</returns>
        public static ulong[] CastToUInt64Array(this decimal[] a)
        {
            var result = new ulong[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (ulong)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="decimal"/>[] to <seealso cref="float"/> and returns the <seealso cref="float"/>[].</summary>
        /// <param name="a">The <seealso cref="decimal"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="float"/>[] with the cast elements.</returns>
        public static float[] CastToSingleArray(this decimal[] a)
        {
            var result = new float[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="decimal"/>[] to <seealso cref="double"/> and returns the <seealso cref="double"/>[].</summary>
        /// <param name="a">The <seealso cref="decimal"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="double"/>[] with the cast elements.</returns>
        public static double[] CastToDoubleArray(this decimal[] a)
        {
            var result = new double[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="decimal"/>[] to <seealso cref="char"/> and returns the <seealso cref="char"/>[].</summary>
        /// <param name="a">The <seealso cref="decimal"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="char"/>[] with the cast elements.</returns>
        public static char[] CastToCharArray(this decimal[] a)
        {
            var result = new char[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (char)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="decimal"/>[] to <seealso cref="bool"/> and returns the <seealso cref="bool"/>[].</summary>
        /// <param name="a">The <seealso cref="decimal"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="bool"/>[] with the cast elements.</returns>
        public static bool[] CastToBooleanArray(this decimal[] a)
        {
            var result = new bool[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = a[i] != 0;
            return result;
        }
        #endregion
        
        #region Char[] -> T[]
        /// <summary>Casts all the elements of the <seealso cref="char"/>[] to <seealso cref="byte"/> and returns the <seealso cref="byte"/>[].</summary>
        /// <param name="a">The <seealso cref="char"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="byte"/>[] with the cast elements.</returns>
        public static byte[] CastToByteArray(this char[] a)
        {
            var result = new byte[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (byte)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="char"/>[] to <seealso cref="short"/> and returns the <seealso cref="short"/>[].</summary>
        /// <param name="a">The <seealso cref="char"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="short"/>[] with the cast elements.</returns>
        public static short[] CastToInt16Array(this char[] a)
        {
            var result = new short[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="char"/>[] to <seealso cref="int"/> and returns the <seealso cref="int"/>[].</summary>
        /// <param name="a">The <seealso cref="char"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="int"/>[] with the cast elements.</returns>
        public static int[] CastToInt32Array(this char[] a)
        {
            var result = new int[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="char"/>[] to <seealso cref="long"/> and returns the <seealso cref="long"/>[].</summary>
        /// <param name="a">The <seealso cref="char"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="long"/>[] with the cast elements.</returns>
        public static long[] CastToInt64Array(this char[] a)
        {
            var result = new long[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (long)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="char"/>[] to <seealso cref="sbyte"/> and returns the <seealso cref="sbyte"/>[].</summary>
        /// <param name="a">The <seealso cref="char"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="sbyte"/>[] with the cast elements.</returns>
        public static sbyte[] CastToSByteArray(this char[] a)
        {
            var result = new sbyte[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (sbyte)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="char"/>[] to <seealso cref="ushort"/> and returns the <seealso cref="ushort"/>[].</summary>
        /// <param name="a">The <seealso cref="char"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="ushort"/>[] with the cast elements.</returns>
        public static ushort[] CastToUInt16Array(this char[] a)
        {
            var result = new ushort[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (ushort)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="char"/>[] to <seealso cref="uint"/> and returns the <seealso cref="uint"/>[].</summary>
        /// <param name="a">The <seealso cref="char"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="uint"/>[] with the cast elements.</returns>
        public static uint[] CastToUInt32Array(this char[] a)
        {
            var result = new uint[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (uint)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="char"/>[] to <seealso cref="ulong"/> and returns the <seealso cref="ulong"/>[].</summary>
        /// <param name="a">The <seealso cref="char"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="ulong"/>[] with the cast elements.</returns>
        public static ulong[] CastToUInt64Array(this char[] a)
        {
            var result = new ulong[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (ulong)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="char"/>[] to <seealso cref="float"/> and returns the <seealso cref="float"/>[].</summary>
        /// <param name="a">The <seealso cref="char"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="float"/>[] with the cast elements.</returns>
        public static float[] CastToSingleArray(this char[] a)
        {
            var result = new float[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="char"/>[] to <seealso cref="double"/> and returns the <seealso cref="double"/>[].</summary>
        /// <param name="a">The <seealso cref="char"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="double"/>[] with the cast elements.</returns>
        public static double[] CastToDoubleArray(this char[] a)
        {
            var result = new double[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="char"/>[] to <seealso cref="decimal"/> and returns the <seealso cref="decimal"/>[].</summary>
        /// <param name="a">The <seealso cref="char"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="decimal"/>[] with the cast elements.</returns>
        public static decimal[] CastToDecimalArray(this char[] a)
        {
            var result = new decimal[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (decimal)a[i];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="char"/>[] to <seealso cref="bool"/> and returns the <seealso cref="bool"/>[].</summary>
        /// <param name="a">The <seealso cref="char"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="bool"/>[] with the cast elements.</returns>
        public static bool[] CastToBooleanArray(this char[] a)
        {
            var result = new bool[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = a[i] != 0;
            return result;
        }
        #endregion
        
        #region Boolean[] -> T[]
        /// <summary>Casts all the elements of the <seealso cref="bool"/>[] to <seealso cref="byte"/> and returns the <seealso cref="byte"/>[].</summary>
        /// <param name="a">The <seealso cref="bool"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="byte"/>[] with the cast elements.</returns>
        public static byte[] CastToByteArray(this bool[] a)
        {
            var result = new byte[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (byte)(a[i] ? 1 : 0);
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="bool"/>[] to <seealso cref="short"/> and returns the <seealso cref="short"/>[].</summary>
        /// <param name="a">The <seealso cref="bool"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="short"/>[] with the cast elements.</returns>
        public static short[] CastToInt16Array(this bool[] a)
        {
            var result = new short[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (short)(a[i] ? 1 : 0);
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="bool"/>[] to <seealso cref="int"/> and returns the <seealso cref="int"/>[].</summary>
        /// <param name="a">The <seealso cref="bool"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="int"/>[] with the cast elements.</returns>
        public static int[] CastToInt32Array(this bool[] a)
        {
            var result = new int[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (int)(a[i] ? 1 : 0);
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="bool"/>[] to <seealso cref="long"/> and returns the <seealso cref="long"/>[].</summary>
        /// <param name="a">The <seealso cref="bool"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="long"/>[] with the cast elements.</returns>
        public static long[] CastToInt64Array(this bool[] a)
        {
            var result = new long[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (long)(a[i] ? 1 : 0);
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="bool"/>[] to <seealso cref="sbyte"/> and returns the <seealso cref="sbyte"/>[].</summary>
        /// <param name="a">The <seealso cref="bool"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="sbyte"/>[] with the cast elements.</returns>
        public static sbyte[] CastToSByteArray(this bool[] a)
        {
            var result = new sbyte[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (sbyte)(a[i] ? 1 : 0);
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="bool"/>[] to <seealso cref="ushort"/> and returns the <seealso cref="ushort"/>[].</summary>
        /// <param name="a">The <seealso cref="bool"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="ushort"/>[] with the cast elements.</returns>
        public static ushort[] CastToUInt16Array(this bool[] a)
        {
            var result = new ushort[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (ushort)(a[i] ? 1 : 0);
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="bool"/>[] to <seealso cref="uint"/> and returns the <seealso cref="uint"/>[].</summary>
        /// <param name="a">The <seealso cref="bool"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="uint"/>[] with the cast elements.</returns>
        public static uint[] CastToUInt32Array(this bool[] a)
        {
            var result = new uint[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (uint)(a[i] ? 1 : 0);
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="bool"/>[] to <seealso cref="ulong"/> and returns the <seealso cref="ulong"/>[].</summary>
        /// <param name="a">The <seealso cref="bool"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="ulong"/>[] with the cast elements.</returns>
        public static ulong[] CastToUInt64Array(this bool[] a)
        {
            var result = new ulong[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (ulong)(a[i] ? 1 : 0);
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="bool"/>[] to <seealso cref="float"/> and returns the <seealso cref="float"/>[].</summary>
        /// <param name="a">The <seealso cref="bool"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="float"/>[] with the cast elements.</returns>
        public static float[] CastToSingleArray(this bool[] a)
        {
            var result = new float[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (float)(a[i] ? 1 : 0);
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="bool"/>[] to <seealso cref="double"/> and returns the <seealso cref="double"/>[].</summary>
        /// <param name="a">The <seealso cref="bool"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="double"/>[] with the cast elements.</returns>
        public static double[] CastToDoubleArray(this bool[] a)
        {
            var result = new double[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (double)(a[i] ? 1 : 0);
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="bool"/>[] to <seealso cref="decimal"/> and returns the <seealso cref="decimal"/>[].</summary>
        /// <param name="a">The <seealso cref="bool"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="decimal"/>[] with the cast elements.</returns>
        public static decimal[] CastToDecimalArray(this bool[] a)
        {
            var result = new decimal[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (decimal)(a[i] ? 1 : 0);
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="bool"/>[] to <seealso cref="char"/> and returns the <seealso cref="char"/>[].</summary>
        /// <param name="a">The <seealso cref="bool"/>[] whose elements to cast.</param>
        /// <returns>The resulting <seealso cref="char"/>[] with the cast elements.</returns>
        public static char[] CastToCharArray(this bool[] a)
        {
            var result = new char[a.Length];
            for (int i = 0; i < a.Length; i++)
                result[i] = (char)(a[i] ? 1 : 0);
            return result;
        }
        #endregion
    }
}