using Garyon.Attributes;
using System;
using System.IO;

namespace Garyon.Extensions.ArrayCasting
{
    /// <summary>Provides array casting extensions for nine-dimensional arrays.</summary>
    [Autogenerated]
    public static class NineDimensionalArrayCastingExtensions
    {
        #region Byte[,,,,,,,,] -> T[,,,,,,,,]
        /// <summary>Casts all the elements of the <seealso cref="byte"/>[,,,,,,,,] to <seealso cref="short"/> and returns the <seealso cref="short"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="byte"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="short"/>[,,,,,,,,] with the cast elements.</return>
        public static short[,,,,,,,,] CastToInt16Array(this byte[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new short[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (short)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="byte"/>[,,,,,,,,] to <seealso cref="int"/> and returns the <seealso cref="int"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="byte"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="int"/>[,,,,,,,,] with the cast elements.</return>
        public static int[,,,,,,,,] CastToInt32Array(this byte[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new int[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (int)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="byte"/>[,,,,,,,,] to <seealso cref="long"/> and returns the <seealso cref="long"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="byte"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="long"/>[,,,,,,,,] with the cast elements.</return>
        public static long[,,,,,,,,] CastToInt64Array(this byte[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new long[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (long)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="byte"/>[,,,,,,,,] to <seealso cref="sbyte"/> and returns the <seealso cref="sbyte"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="byte"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="sbyte"/>[,,,,,,,,] with the cast elements.</return>
        public static sbyte[,,,,,,,,] CastToSByteArray(this byte[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new sbyte[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (sbyte)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="byte"/>[,,,,,,,,] to <seealso cref="ushort"/> and returns the <seealso cref="ushort"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="byte"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="ushort"/>[,,,,,,,,] with the cast elements.</return>
        public static ushort[,,,,,,,,] CastToUInt16Array(this byte[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new ushort[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (ushort)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="byte"/>[,,,,,,,,] to <seealso cref="uint"/> and returns the <seealso cref="uint"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="byte"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="uint"/>[,,,,,,,,] with the cast elements.</return>
        public static uint[,,,,,,,,] CastToUInt32Array(this byte[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new uint[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (uint)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="byte"/>[,,,,,,,,] to <seealso cref="ulong"/> and returns the <seealso cref="ulong"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="byte"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="ulong"/>[,,,,,,,,] with the cast elements.</return>
        public static ulong[,,,,,,,,] CastToUInt64Array(this byte[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new ulong[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (ulong)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="byte"/>[,,,,,,,,] to <seealso cref="float"/> and returns the <seealso cref="float"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="byte"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="float"/>[,,,,,,,,] with the cast elements.</return>
        public static float[,,,,,,,,] CastToSingleArray(this byte[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new float[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (float)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="byte"/>[,,,,,,,,] to <seealso cref="double"/> and returns the <seealso cref="double"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="byte"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="double"/>[,,,,,,,,] with the cast elements.</return>
        public static double[,,,,,,,,] CastToDoubleArray(this byte[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new double[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (double)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="byte"/>[,,,,,,,,] to <seealso cref="decimal"/> and returns the <seealso cref="decimal"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="byte"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="decimal"/>[,,,,,,,,] with the cast elements.</return>
        public static decimal[,,,,,,,,] CastToDecimalArray(this byte[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new decimal[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (decimal)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="byte"/>[,,,,,,,,] to <seealso cref="char"/> and returns the <seealso cref="char"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="byte"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="char"/>[,,,,,,,,] with the cast elements.</return>
        public static char[,,,,,,,,] CastToCharArray(this byte[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new char[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (char)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="byte"/>[,,,,,,,,] to <seealso cref="bool"/> and returns the <seealso cref="bool"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="byte"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="bool"/>[,,,,,,,,] with the cast elements.</return>
        public static bool[,,,,,,,,] CastToBooleanArray(this byte[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new bool[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = a[i0, i1, i2, i3, i4, i5, i6, i7, i8] != 0;
            return result;
        }
        #endregion
        
        #region Int16[,,,,,,,,] -> T[,,,,,,,,]
        /// <summary>Casts all the elements of the <seealso cref="short"/>[,,,,,,,,] to <seealso cref="byte"/> and returns the <seealso cref="byte"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="short"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="byte"/>[,,,,,,,,] with the cast elements.</return>
        public static byte[,,,,,,,,] CastToByteArray(this short[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new byte[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (byte)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="short"/>[,,,,,,,,] to <seealso cref="int"/> and returns the <seealso cref="int"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="short"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="int"/>[,,,,,,,,] with the cast elements.</return>
        public static int[,,,,,,,,] CastToInt32Array(this short[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new int[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (int)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="short"/>[,,,,,,,,] to <seealso cref="long"/> and returns the <seealso cref="long"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="short"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="long"/>[,,,,,,,,] with the cast elements.</return>
        public static long[,,,,,,,,] CastToInt64Array(this short[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new long[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (long)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="short"/>[,,,,,,,,] to <seealso cref="sbyte"/> and returns the <seealso cref="sbyte"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="short"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="sbyte"/>[,,,,,,,,] with the cast elements.</return>
        public static sbyte[,,,,,,,,] CastToSByteArray(this short[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new sbyte[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (sbyte)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="short"/>[,,,,,,,,] to <seealso cref="ushort"/> and returns the <seealso cref="ushort"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="short"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="ushort"/>[,,,,,,,,] with the cast elements.</return>
        public static ushort[,,,,,,,,] CastToUInt16Array(this short[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new ushort[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (ushort)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="short"/>[,,,,,,,,] to <seealso cref="uint"/> and returns the <seealso cref="uint"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="short"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="uint"/>[,,,,,,,,] with the cast elements.</return>
        public static uint[,,,,,,,,] CastToUInt32Array(this short[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new uint[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (uint)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="short"/>[,,,,,,,,] to <seealso cref="ulong"/> and returns the <seealso cref="ulong"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="short"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="ulong"/>[,,,,,,,,] with the cast elements.</return>
        public static ulong[,,,,,,,,] CastToUInt64Array(this short[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new ulong[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (ulong)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="short"/>[,,,,,,,,] to <seealso cref="float"/> and returns the <seealso cref="float"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="short"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="float"/>[,,,,,,,,] with the cast elements.</return>
        public static float[,,,,,,,,] CastToSingleArray(this short[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new float[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (float)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="short"/>[,,,,,,,,] to <seealso cref="double"/> and returns the <seealso cref="double"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="short"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="double"/>[,,,,,,,,] with the cast elements.</return>
        public static double[,,,,,,,,] CastToDoubleArray(this short[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new double[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (double)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="short"/>[,,,,,,,,] to <seealso cref="decimal"/> and returns the <seealso cref="decimal"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="short"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="decimal"/>[,,,,,,,,] with the cast elements.</return>
        public static decimal[,,,,,,,,] CastToDecimalArray(this short[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new decimal[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (decimal)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="short"/>[,,,,,,,,] to <seealso cref="char"/> and returns the <seealso cref="char"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="short"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="char"/>[,,,,,,,,] with the cast elements.</return>
        public static char[,,,,,,,,] CastToCharArray(this short[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new char[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (char)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="short"/>[,,,,,,,,] to <seealso cref="bool"/> and returns the <seealso cref="bool"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="short"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="bool"/>[,,,,,,,,] with the cast elements.</return>
        public static bool[,,,,,,,,] CastToBooleanArray(this short[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new bool[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = a[i0, i1, i2, i3, i4, i5, i6, i7, i8] != 0;
            return result;
        }
        #endregion
        
        #region Int32[,,,,,,,,] -> T[,,,,,,,,]
        /// <summary>Casts all the elements of the <seealso cref="int"/>[,,,,,,,,] to <seealso cref="byte"/> and returns the <seealso cref="byte"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="int"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="byte"/>[,,,,,,,,] with the cast elements.</return>
        public static byte[,,,,,,,,] CastToByteArray(this int[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new byte[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (byte)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="int"/>[,,,,,,,,] to <seealso cref="short"/> and returns the <seealso cref="short"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="int"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="short"/>[,,,,,,,,] with the cast elements.</return>
        public static short[,,,,,,,,] CastToInt16Array(this int[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new short[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (short)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="int"/>[,,,,,,,,] to <seealso cref="long"/> and returns the <seealso cref="long"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="int"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="long"/>[,,,,,,,,] with the cast elements.</return>
        public static long[,,,,,,,,] CastToInt64Array(this int[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new long[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (long)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="int"/>[,,,,,,,,] to <seealso cref="sbyte"/> and returns the <seealso cref="sbyte"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="int"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="sbyte"/>[,,,,,,,,] with the cast elements.</return>
        public static sbyte[,,,,,,,,] CastToSByteArray(this int[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new sbyte[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (sbyte)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="int"/>[,,,,,,,,] to <seealso cref="ushort"/> and returns the <seealso cref="ushort"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="int"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="ushort"/>[,,,,,,,,] with the cast elements.</return>
        public static ushort[,,,,,,,,] CastToUInt16Array(this int[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new ushort[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (ushort)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="int"/>[,,,,,,,,] to <seealso cref="uint"/> and returns the <seealso cref="uint"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="int"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="uint"/>[,,,,,,,,] with the cast elements.</return>
        public static uint[,,,,,,,,] CastToUInt32Array(this int[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new uint[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (uint)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="int"/>[,,,,,,,,] to <seealso cref="ulong"/> and returns the <seealso cref="ulong"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="int"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="ulong"/>[,,,,,,,,] with the cast elements.</return>
        public static ulong[,,,,,,,,] CastToUInt64Array(this int[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new ulong[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (ulong)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="int"/>[,,,,,,,,] to <seealso cref="float"/> and returns the <seealso cref="float"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="int"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="float"/>[,,,,,,,,] with the cast elements.</return>
        public static float[,,,,,,,,] CastToSingleArray(this int[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new float[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (float)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="int"/>[,,,,,,,,] to <seealso cref="double"/> and returns the <seealso cref="double"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="int"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="double"/>[,,,,,,,,] with the cast elements.</return>
        public static double[,,,,,,,,] CastToDoubleArray(this int[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new double[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (double)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="int"/>[,,,,,,,,] to <seealso cref="decimal"/> and returns the <seealso cref="decimal"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="int"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="decimal"/>[,,,,,,,,] with the cast elements.</return>
        public static decimal[,,,,,,,,] CastToDecimalArray(this int[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new decimal[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (decimal)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="int"/>[,,,,,,,,] to <seealso cref="char"/> and returns the <seealso cref="char"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="int"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="char"/>[,,,,,,,,] with the cast elements.</return>
        public static char[,,,,,,,,] CastToCharArray(this int[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new char[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (char)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="int"/>[,,,,,,,,] to <seealso cref="bool"/> and returns the <seealso cref="bool"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="int"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="bool"/>[,,,,,,,,] with the cast elements.</return>
        public static bool[,,,,,,,,] CastToBooleanArray(this int[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new bool[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = a[i0, i1, i2, i3, i4, i5, i6, i7, i8] != 0;
            return result;
        }
        #endregion
        
        #region Int64[,,,,,,,,] -> T[,,,,,,,,]
        /// <summary>Casts all the elements of the <seealso cref="long"/>[,,,,,,,,] to <seealso cref="byte"/> and returns the <seealso cref="byte"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="long"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="byte"/>[,,,,,,,,] with the cast elements.</return>
        public static byte[,,,,,,,,] CastToByteArray(this long[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new byte[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (byte)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="long"/>[,,,,,,,,] to <seealso cref="short"/> and returns the <seealso cref="short"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="long"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="short"/>[,,,,,,,,] with the cast elements.</return>
        public static short[,,,,,,,,] CastToInt16Array(this long[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new short[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (short)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="long"/>[,,,,,,,,] to <seealso cref="int"/> and returns the <seealso cref="int"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="long"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="int"/>[,,,,,,,,] with the cast elements.</return>
        public static int[,,,,,,,,] CastToInt32Array(this long[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new int[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (int)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="long"/>[,,,,,,,,] to <seealso cref="sbyte"/> and returns the <seealso cref="sbyte"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="long"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="sbyte"/>[,,,,,,,,] with the cast elements.</return>
        public static sbyte[,,,,,,,,] CastToSByteArray(this long[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new sbyte[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (sbyte)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="long"/>[,,,,,,,,] to <seealso cref="ushort"/> and returns the <seealso cref="ushort"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="long"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="ushort"/>[,,,,,,,,] with the cast elements.</return>
        public static ushort[,,,,,,,,] CastToUInt16Array(this long[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new ushort[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (ushort)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="long"/>[,,,,,,,,] to <seealso cref="uint"/> and returns the <seealso cref="uint"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="long"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="uint"/>[,,,,,,,,] with the cast elements.</return>
        public static uint[,,,,,,,,] CastToUInt32Array(this long[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new uint[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (uint)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="long"/>[,,,,,,,,] to <seealso cref="ulong"/> and returns the <seealso cref="ulong"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="long"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="ulong"/>[,,,,,,,,] with the cast elements.</return>
        public static ulong[,,,,,,,,] CastToUInt64Array(this long[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new ulong[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (ulong)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="long"/>[,,,,,,,,] to <seealso cref="float"/> and returns the <seealso cref="float"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="long"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="float"/>[,,,,,,,,] with the cast elements.</return>
        public static float[,,,,,,,,] CastToSingleArray(this long[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new float[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (float)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="long"/>[,,,,,,,,] to <seealso cref="double"/> and returns the <seealso cref="double"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="long"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="double"/>[,,,,,,,,] with the cast elements.</return>
        public static double[,,,,,,,,] CastToDoubleArray(this long[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new double[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (double)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="long"/>[,,,,,,,,] to <seealso cref="decimal"/> and returns the <seealso cref="decimal"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="long"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="decimal"/>[,,,,,,,,] with the cast elements.</return>
        public static decimal[,,,,,,,,] CastToDecimalArray(this long[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new decimal[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (decimal)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="long"/>[,,,,,,,,] to <seealso cref="char"/> and returns the <seealso cref="char"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="long"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="char"/>[,,,,,,,,] with the cast elements.</return>
        public static char[,,,,,,,,] CastToCharArray(this long[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new char[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (char)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="long"/>[,,,,,,,,] to <seealso cref="bool"/> and returns the <seealso cref="bool"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="long"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="bool"/>[,,,,,,,,] with the cast elements.</return>
        public static bool[,,,,,,,,] CastToBooleanArray(this long[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new bool[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = a[i0, i1, i2, i3, i4, i5, i6, i7, i8] != 0;
            return result;
        }
        #endregion
        
        #region SByte[,,,,,,,,] -> T[,,,,,,,,]
        /// <summary>Casts all the elements of the <seealso cref="sbyte"/>[,,,,,,,,] to <seealso cref="byte"/> and returns the <seealso cref="byte"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="sbyte"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="byte"/>[,,,,,,,,] with the cast elements.</return>
        public static byte[,,,,,,,,] CastToByteArray(this sbyte[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new byte[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (byte)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="sbyte"/>[,,,,,,,,] to <seealso cref="short"/> and returns the <seealso cref="short"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="sbyte"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="short"/>[,,,,,,,,] with the cast elements.</return>
        public static short[,,,,,,,,] CastToInt16Array(this sbyte[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new short[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (short)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="sbyte"/>[,,,,,,,,] to <seealso cref="int"/> and returns the <seealso cref="int"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="sbyte"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="int"/>[,,,,,,,,] with the cast elements.</return>
        public static int[,,,,,,,,] CastToInt32Array(this sbyte[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new int[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (int)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="sbyte"/>[,,,,,,,,] to <seealso cref="long"/> and returns the <seealso cref="long"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="sbyte"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="long"/>[,,,,,,,,] with the cast elements.</return>
        public static long[,,,,,,,,] CastToInt64Array(this sbyte[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new long[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (long)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="sbyte"/>[,,,,,,,,] to <seealso cref="ushort"/> and returns the <seealso cref="ushort"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="sbyte"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="ushort"/>[,,,,,,,,] with the cast elements.</return>
        public static ushort[,,,,,,,,] CastToUInt16Array(this sbyte[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new ushort[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (ushort)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="sbyte"/>[,,,,,,,,] to <seealso cref="uint"/> and returns the <seealso cref="uint"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="sbyte"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="uint"/>[,,,,,,,,] with the cast elements.</return>
        public static uint[,,,,,,,,] CastToUInt32Array(this sbyte[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new uint[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (uint)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="sbyte"/>[,,,,,,,,] to <seealso cref="ulong"/> and returns the <seealso cref="ulong"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="sbyte"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="ulong"/>[,,,,,,,,] with the cast elements.</return>
        public static ulong[,,,,,,,,] CastToUInt64Array(this sbyte[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new ulong[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (ulong)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="sbyte"/>[,,,,,,,,] to <seealso cref="float"/> and returns the <seealso cref="float"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="sbyte"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="float"/>[,,,,,,,,] with the cast elements.</return>
        public static float[,,,,,,,,] CastToSingleArray(this sbyte[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new float[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (float)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="sbyte"/>[,,,,,,,,] to <seealso cref="double"/> and returns the <seealso cref="double"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="sbyte"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="double"/>[,,,,,,,,] with the cast elements.</return>
        public static double[,,,,,,,,] CastToDoubleArray(this sbyte[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new double[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (double)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="sbyte"/>[,,,,,,,,] to <seealso cref="decimal"/> and returns the <seealso cref="decimal"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="sbyte"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="decimal"/>[,,,,,,,,] with the cast elements.</return>
        public static decimal[,,,,,,,,] CastToDecimalArray(this sbyte[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new decimal[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (decimal)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="sbyte"/>[,,,,,,,,] to <seealso cref="char"/> and returns the <seealso cref="char"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="sbyte"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="char"/>[,,,,,,,,] with the cast elements.</return>
        public static char[,,,,,,,,] CastToCharArray(this sbyte[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new char[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (char)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="sbyte"/>[,,,,,,,,] to <seealso cref="bool"/> and returns the <seealso cref="bool"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="sbyte"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="bool"/>[,,,,,,,,] with the cast elements.</return>
        public static bool[,,,,,,,,] CastToBooleanArray(this sbyte[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new bool[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = a[i0, i1, i2, i3, i4, i5, i6, i7, i8] != 0;
            return result;
        }
        #endregion
        
        #region UInt16[,,,,,,,,] -> T[,,,,,,,,]
        /// <summary>Casts all the elements of the <seealso cref="ushort"/>[,,,,,,,,] to <seealso cref="byte"/> and returns the <seealso cref="byte"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="ushort"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="byte"/>[,,,,,,,,] with the cast elements.</return>
        public static byte[,,,,,,,,] CastToByteArray(this ushort[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new byte[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (byte)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ushort"/>[,,,,,,,,] to <seealso cref="short"/> and returns the <seealso cref="short"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="ushort"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="short"/>[,,,,,,,,] with the cast elements.</return>
        public static short[,,,,,,,,] CastToInt16Array(this ushort[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new short[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (short)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ushort"/>[,,,,,,,,] to <seealso cref="int"/> and returns the <seealso cref="int"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="ushort"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="int"/>[,,,,,,,,] with the cast elements.</return>
        public static int[,,,,,,,,] CastToInt32Array(this ushort[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new int[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (int)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ushort"/>[,,,,,,,,] to <seealso cref="long"/> and returns the <seealso cref="long"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="ushort"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="long"/>[,,,,,,,,] with the cast elements.</return>
        public static long[,,,,,,,,] CastToInt64Array(this ushort[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new long[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (long)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ushort"/>[,,,,,,,,] to <seealso cref="sbyte"/> and returns the <seealso cref="sbyte"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="ushort"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="sbyte"/>[,,,,,,,,] with the cast elements.</return>
        public static sbyte[,,,,,,,,] CastToSByteArray(this ushort[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new sbyte[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (sbyte)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ushort"/>[,,,,,,,,] to <seealso cref="uint"/> and returns the <seealso cref="uint"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="ushort"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="uint"/>[,,,,,,,,] with the cast elements.</return>
        public static uint[,,,,,,,,] CastToUInt32Array(this ushort[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new uint[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (uint)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ushort"/>[,,,,,,,,] to <seealso cref="ulong"/> and returns the <seealso cref="ulong"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="ushort"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="ulong"/>[,,,,,,,,] with the cast elements.</return>
        public static ulong[,,,,,,,,] CastToUInt64Array(this ushort[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new ulong[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (ulong)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ushort"/>[,,,,,,,,] to <seealso cref="float"/> and returns the <seealso cref="float"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="ushort"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="float"/>[,,,,,,,,] with the cast elements.</return>
        public static float[,,,,,,,,] CastToSingleArray(this ushort[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new float[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (float)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ushort"/>[,,,,,,,,] to <seealso cref="double"/> and returns the <seealso cref="double"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="ushort"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="double"/>[,,,,,,,,] with the cast elements.</return>
        public static double[,,,,,,,,] CastToDoubleArray(this ushort[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new double[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (double)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ushort"/>[,,,,,,,,] to <seealso cref="decimal"/> and returns the <seealso cref="decimal"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="ushort"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="decimal"/>[,,,,,,,,] with the cast elements.</return>
        public static decimal[,,,,,,,,] CastToDecimalArray(this ushort[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new decimal[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (decimal)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ushort"/>[,,,,,,,,] to <seealso cref="char"/> and returns the <seealso cref="char"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="ushort"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="char"/>[,,,,,,,,] with the cast elements.</return>
        public static char[,,,,,,,,] CastToCharArray(this ushort[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new char[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (char)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ushort"/>[,,,,,,,,] to <seealso cref="bool"/> and returns the <seealso cref="bool"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="ushort"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="bool"/>[,,,,,,,,] with the cast elements.</return>
        public static bool[,,,,,,,,] CastToBooleanArray(this ushort[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new bool[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = a[i0, i1, i2, i3, i4, i5, i6, i7, i8] != 0;
            return result;
        }
        #endregion
        
        #region UInt32[,,,,,,,,] -> T[,,,,,,,,]
        /// <summary>Casts all the elements of the <seealso cref="uint"/>[,,,,,,,,] to <seealso cref="byte"/> and returns the <seealso cref="byte"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="uint"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="byte"/>[,,,,,,,,] with the cast elements.</return>
        public static byte[,,,,,,,,] CastToByteArray(this uint[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new byte[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (byte)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="uint"/>[,,,,,,,,] to <seealso cref="short"/> and returns the <seealso cref="short"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="uint"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="short"/>[,,,,,,,,] with the cast elements.</return>
        public static short[,,,,,,,,] CastToInt16Array(this uint[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new short[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (short)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="uint"/>[,,,,,,,,] to <seealso cref="int"/> and returns the <seealso cref="int"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="uint"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="int"/>[,,,,,,,,] with the cast elements.</return>
        public static int[,,,,,,,,] CastToInt32Array(this uint[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new int[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (int)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="uint"/>[,,,,,,,,] to <seealso cref="long"/> and returns the <seealso cref="long"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="uint"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="long"/>[,,,,,,,,] with the cast elements.</return>
        public static long[,,,,,,,,] CastToInt64Array(this uint[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new long[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (long)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="uint"/>[,,,,,,,,] to <seealso cref="sbyte"/> and returns the <seealso cref="sbyte"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="uint"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="sbyte"/>[,,,,,,,,] with the cast elements.</return>
        public static sbyte[,,,,,,,,] CastToSByteArray(this uint[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new sbyte[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (sbyte)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="uint"/>[,,,,,,,,] to <seealso cref="ushort"/> and returns the <seealso cref="ushort"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="uint"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="ushort"/>[,,,,,,,,] with the cast elements.</return>
        public static ushort[,,,,,,,,] CastToUInt16Array(this uint[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new ushort[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (ushort)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="uint"/>[,,,,,,,,] to <seealso cref="ulong"/> and returns the <seealso cref="ulong"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="uint"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="ulong"/>[,,,,,,,,] with the cast elements.</return>
        public static ulong[,,,,,,,,] CastToUInt64Array(this uint[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new ulong[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (ulong)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="uint"/>[,,,,,,,,] to <seealso cref="float"/> and returns the <seealso cref="float"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="uint"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="float"/>[,,,,,,,,] with the cast elements.</return>
        public static float[,,,,,,,,] CastToSingleArray(this uint[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new float[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (float)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="uint"/>[,,,,,,,,] to <seealso cref="double"/> and returns the <seealso cref="double"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="uint"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="double"/>[,,,,,,,,] with the cast elements.</return>
        public static double[,,,,,,,,] CastToDoubleArray(this uint[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new double[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (double)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="uint"/>[,,,,,,,,] to <seealso cref="decimal"/> and returns the <seealso cref="decimal"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="uint"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="decimal"/>[,,,,,,,,] with the cast elements.</return>
        public static decimal[,,,,,,,,] CastToDecimalArray(this uint[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new decimal[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (decimal)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="uint"/>[,,,,,,,,] to <seealso cref="char"/> and returns the <seealso cref="char"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="uint"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="char"/>[,,,,,,,,] with the cast elements.</return>
        public static char[,,,,,,,,] CastToCharArray(this uint[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new char[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (char)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="uint"/>[,,,,,,,,] to <seealso cref="bool"/> and returns the <seealso cref="bool"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="uint"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="bool"/>[,,,,,,,,] with the cast elements.</return>
        public static bool[,,,,,,,,] CastToBooleanArray(this uint[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new bool[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = a[i0, i1, i2, i3, i4, i5, i6, i7, i8] != 0;
            return result;
        }
        #endregion
        
        #region UInt64[,,,,,,,,] -> T[,,,,,,,,]
        /// <summary>Casts all the elements of the <seealso cref="ulong"/>[,,,,,,,,] to <seealso cref="byte"/> and returns the <seealso cref="byte"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="ulong"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="byte"/>[,,,,,,,,] with the cast elements.</return>
        public static byte[,,,,,,,,] CastToByteArray(this ulong[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new byte[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (byte)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ulong"/>[,,,,,,,,] to <seealso cref="short"/> and returns the <seealso cref="short"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="ulong"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="short"/>[,,,,,,,,] with the cast elements.</return>
        public static short[,,,,,,,,] CastToInt16Array(this ulong[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new short[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (short)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ulong"/>[,,,,,,,,] to <seealso cref="int"/> and returns the <seealso cref="int"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="ulong"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="int"/>[,,,,,,,,] with the cast elements.</return>
        public static int[,,,,,,,,] CastToInt32Array(this ulong[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new int[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (int)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ulong"/>[,,,,,,,,] to <seealso cref="long"/> and returns the <seealso cref="long"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="ulong"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="long"/>[,,,,,,,,] with the cast elements.</return>
        public static long[,,,,,,,,] CastToInt64Array(this ulong[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new long[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (long)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ulong"/>[,,,,,,,,] to <seealso cref="sbyte"/> and returns the <seealso cref="sbyte"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="ulong"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="sbyte"/>[,,,,,,,,] with the cast elements.</return>
        public static sbyte[,,,,,,,,] CastToSByteArray(this ulong[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new sbyte[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (sbyte)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ulong"/>[,,,,,,,,] to <seealso cref="ushort"/> and returns the <seealso cref="ushort"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="ulong"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="ushort"/>[,,,,,,,,] with the cast elements.</return>
        public static ushort[,,,,,,,,] CastToUInt16Array(this ulong[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new ushort[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (ushort)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ulong"/>[,,,,,,,,] to <seealso cref="uint"/> and returns the <seealso cref="uint"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="ulong"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="uint"/>[,,,,,,,,] with the cast elements.</return>
        public static uint[,,,,,,,,] CastToUInt32Array(this ulong[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new uint[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (uint)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ulong"/>[,,,,,,,,] to <seealso cref="float"/> and returns the <seealso cref="float"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="ulong"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="float"/>[,,,,,,,,] with the cast elements.</return>
        public static float[,,,,,,,,] CastToSingleArray(this ulong[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new float[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (float)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ulong"/>[,,,,,,,,] to <seealso cref="double"/> and returns the <seealso cref="double"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="ulong"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="double"/>[,,,,,,,,] with the cast elements.</return>
        public static double[,,,,,,,,] CastToDoubleArray(this ulong[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new double[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (double)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ulong"/>[,,,,,,,,] to <seealso cref="decimal"/> and returns the <seealso cref="decimal"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="ulong"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="decimal"/>[,,,,,,,,] with the cast elements.</return>
        public static decimal[,,,,,,,,] CastToDecimalArray(this ulong[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new decimal[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (decimal)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ulong"/>[,,,,,,,,] to <seealso cref="char"/> and returns the <seealso cref="char"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="ulong"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="char"/>[,,,,,,,,] with the cast elements.</return>
        public static char[,,,,,,,,] CastToCharArray(this ulong[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new char[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (char)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="ulong"/>[,,,,,,,,] to <seealso cref="bool"/> and returns the <seealso cref="bool"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="ulong"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="bool"/>[,,,,,,,,] with the cast elements.</return>
        public static bool[,,,,,,,,] CastToBooleanArray(this ulong[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new bool[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = a[i0, i1, i2, i3, i4, i5, i6, i7, i8] != 0;
            return result;
        }
        #endregion
        
        #region Single[,,,,,,,,] -> T[,,,,,,,,]
        /// <summary>Casts all the elements of the <seealso cref="float"/>[,,,,,,,,] to <seealso cref="byte"/> and returns the <seealso cref="byte"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="float"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="byte"/>[,,,,,,,,] with the cast elements.</return>
        public static byte[,,,,,,,,] CastToByteArray(this float[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new byte[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (byte)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="float"/>[,,,,,,,,] to <seealso cref="short"/> and returns the <seealso cref="short"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="float"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="short"/>[,,,,,,,,] with the cast elements.</return>
        public static short[,,,,,,,,] CastToInt16Array(this float[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new short[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (short)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="float"/>[,,,,,,,,] to <seealso cref="int"/> and returns the <seealso cref="int"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="float"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="int"/>[,,,,,,,,] with the cast elements.</return>
        public static int[,,,,,,,,] CastToInt32Array(this float[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new int[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (int)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="float"/>[,,,,,,,,] to <seealso cref="long"/> and returns the <seealso cref="long"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="float"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="long"/>[,,,,,,,,] with the cast elements.</return>
        public static long[,,,,,,,,] CastToInt64Array(this float[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new long[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (long)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="float"/>[,,,,,,,,] to <seealso cref="sbyte"/> and returns the <seealso cref="sbyte"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="float"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="sbyte"/>[,,,,,,,,] with the cast elements.</return>
        public static sbyte[,,,,,,,,] CastToSByteArray(this float[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new sbyte[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (sbyte)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="float"/>[,,,,,,,,] to <seealso cref="ushort"/> and returns the <seealso cref="ushort"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="float"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="ushort"/>[,,,,,,,,] with the cast elements.</return>
        public static ushort[,,,,,,,,] CastToUInt16Array(this float[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new ushort[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (ushort)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="float"/>[,,,,,,,,] to <seealso cref="uint"/> and returns the <seealso cref="uint"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="float"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="uint"/>[,,,,,,,,] with the cast elements.</return>
        public static uint[,,,,,,,,] CastToUInt32Array(this float[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new uint[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (uint)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="float"/>[,,,,,,,,] to <seealso cref="ulong"/> and returns the <seealso cref="ulong"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="float"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="ulong"/>[,,,,,,,,] with the cast elements.</return>
        public static ulong[,,,,,,,,] CastToUInt64Array(this float[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new ulong[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (ulong)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="float"/>[,,,,,,,,] to <seealso cref="double"/> and returns the <seealso cref="double"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="float"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="double"/>[,,,,,,,,] with the cast elements.</return>
        public static double[,,,,,,,,] CastToDoubleArray(this float[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new double[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (double)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="float"/>[,,,,,,,,] to <seealso cref="decimal"/> and returns the <seealso cref="decimal"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="float"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="decimal"/>[,,,,,,,,] with the cast elements.</return>
        public static decimal[,,,,,,,,] CastToDecimalArray(this float[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new decimal[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (decimal)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="float"/>[,,,,,,,,] to <seealso cref="char"/> and returns the <seealso cref="char"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="float"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="char"/>[,,,,,,,,] with the cast elements.</return>
        public static char[,,,,,,,,] CastToCharArray(this float[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new char[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (char)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="float"/>[,,,,,,,,] to <seealso cref="bool"/> and returns the <seealso cref="bool"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="float"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="bool"/>[,,,,,,,,] with the cast elements.</return>
        public static bool[,,,,,,,,] CastToBooleanArray(this float[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new bool[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = a[i0, i1, i2, i3, i4, i5, i6, i7, i8] != 0;
            return result;
        }
        #endregion
        
        #region Double[,,,,,,,,] -> T[,,,,,,,,]
        /// <summary>Casts all the elements of the <seealso cref="double"/>[,,,,,,,,] to <seealso cref="byte"/> and returns the <seealso cref="byte"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="double"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="byte"/>[,,,,,,,,] with the cast elements.</return>
        public static byte[,,,,,,,,] CastToByteArray(this double[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new byte[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (byte)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="double"/>[,,,,,,,,] to <seealso cref="short"/> and returns the <seealso cref="short"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="double"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="short"/>[,,,,,,,,] with the cast elements.</return>
        public static short[,,,,,,,,] CastToInt16Array(this double[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new short[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (short)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="double"/>[,,,,,,,,] to <seealso cref="int"/> and returns the <seealso cref="int"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="double"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="int"/>[,,,,,,,,] with the cast elements.</return>
        public static int[,,,,,,,,] CastToInt32Array(this double[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new int[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (int)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="double"/>[,,,,,,,,] to <seealso cref="long"/> and returns the <seealso cref="long"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="double"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="long"/>[,,,,,,,,] with the cast elements.</return>
        public static long[,,,,,,,,] CastToInt64Array(this double[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new long[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (long)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="double"/>[,,,,,,,,] to <seealso cref="sbyte"/> and returns the <seealso cref="sbyte"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="double"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="sbyte"/>[,,,,,,,,] with the cast elements.</return>
        public static sbyte[,,,,,,,,] CastToSByteArray(this double[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new sbyte[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (sbyte)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="double"/>[,,,,,,,,] to <seealso cref="ushort"/> and returns the <seealso cref="ushort"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="double"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="ushort"/>[,,,,,,,,] with the cast elements.</return>
        public static ushort[,,,,,,,,] CastToUInt16Array(this double[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new ushort[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (ushort)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="double"/>[,,,,,,,,] to <seealso cref="uint"/> and returns the <seealso cref="uint"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="double"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="uint"/>[,,,,,,,,] with the cast elements.</return>
        public static uint[,,,,,,,,] CastToUInt32Array(this double[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new uint[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (uint)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="double"/>[,,,,,,,,] to <seealso cref="ulong"/> and returns the <seealso cref="ulong"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="double"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="ulong"/>[,,,,,,,,] with the cast elements.</return>
        public static ulong[,,,,,,,,] CastToUInt64Array(this double[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new ulong[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (ulong)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="double"/>[,,,,,,,,] to <seealso cref="float"/> and returns the <seealso cref="float"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="double"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="float"/>[,,,,,,,,] with the cast elements.</return>
        public static float[,,,,,,,,] CastToSingleArray(this double[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new float[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (float)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="double"/>[,,,,,,,,] to <seealso cref="decimal"/> and returns the <seealso cref="decimal"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="double"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="decimal"/>[,,,,,,,,] with the cast elements.</return>
        public static decimal[,,,,,,,,] CastToDecimalArray(this double[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new decimal[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (decimal)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="double"/>[,,,,,,,,] to <seealso cref="char"/> and returns the <seealso cref="char"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="double"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="char"/>[,,,,,,,,] with the cast elements.</return>
        public static char[,,,,,,,,] CastToCharArray(this double[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new char[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (char)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="double"/>[,,,,,,,,] to <seealso cref="bool"/> and returns the <seealso cref="bool"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="double"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="bool"/>[,,,,,,,,] with the cast elements.</return>
        public static bool[,,,,,,,,] CastToBooleanArray(this double[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new bool[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = a[i0, i1, i2, i3, i4, i5, i6, i7, i8] != 0;
            return result;
        }
        #endregion
        
        #region Decimal[,,,,,,,,] -> T[,,,,,,,,]
        /// <summary>Casts all the elements of the <seealso cref="decimal"/>[,,,,,,,,] to <seealso cref="byte"/> and returns the <seealso cref="byte"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="decimal"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="byte"/>[,,,,,,,,] with the cast elements.</return>
        public static byte[,,,,,,,,] CastToByteArray(this decimal[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new byte[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (byte)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="decimal"/>[,,,,,,,,] to <seealso cref="short"/> and returns the <seealso cref="short"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="decimal"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="short"/>[,,,,,,,,] with the cast elements.</return>
        public static short[,,,,,,,,] CastToInt16Array(this decimal[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new short[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (short)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="decimal"/>[,,,,,,,,] to <seealso cref="int"/> and returns the <seealso cref="int"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="decimal"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="int"/>[,,,,,,,,] with the cast elements.</return>
        public static int[,,,,,,,,] CastToInt32Array(this decimal[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new int[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (int)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="decimal"/>[,,,,,,,,] to <seealso cref="long"/> and returns the <seealso cref="long"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="decimal"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="long"/>[,,,,,,,,] with the cast elements.</return>
        public static long[,,,,,,,,] CastToInt64Array(this decimal[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new long[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (long)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="decimal"/>[,,,,,,,,] to <seealso cref="sbyte"/> and returns the <seealso cref="sbyte"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="decimal"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="sbyte"/>[,,,,,,,,] with the cast elements.</return>
        public static sbyte[,,,,,,,,] CastToSByteArray(this decimal[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new sbyte[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (sbyte)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="decimal"/>[,,,,,,,,] to <seealso cref="ushort"/> and returns the <seealso cref="ushort"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="decimal"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="ushort"/>[,,,,,,,,] with the cast elements.</return>
        public static ushort[,,,,,,,,] CastToUInt16Array(this decimal[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new ushort[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (ushort)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="decimal"/>[,,,,,,,,] to <seealso cref="uint"/> and returns the <seealso cref="uint"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="decimal"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="uint"/>[,,,,,,,,] with the cast elements.</return>
        public static uint[,,,,,,,,] CastToUInt32Array(this decimal[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new uint[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (uint)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="decimal"/>[,,,,,,,,] to <seealso cref="ulong"/> and returns the <seealso cref="ulong"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="decimal"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="ulong"/>[,,,,,,,,] with the cast elements.</return>
        public static ulong[,,,,,,,,] CastToUInt64Array(this decimal[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new ulong[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (ulong)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="decimal"/>[,,,,,,,,] to <seealso cref="float"/> and returns the <seealso cref="float"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="decimal"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="float"/>[,,,,,,,,] with the cast elements.</return>
        public static float[,,,,,,,,] CastToSingleArray(this decimal[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new float[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (float)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="decimal"/>[,,,,,,,,] to <seealso cref="double"/> and returns the <seealso cref="double"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="decimal"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="double"/>[,,,,,,,,] with the cast elements.</return>
        public static double[,,,,,,,,] CastToDoubleArray(this decimal[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new double[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (double)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="decimal"/>[,,,,,,,,] to <seealso cref="char"/> and returns the <seealso cref="char"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="decimal"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="char"/>[,,,,,,,,] with the cast elements.</return>
        public static char[,,,,,,,,] CastToCharArray(this decimal[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new char[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (char)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="decimal"/>[,,,,,,,,] to <seealso cref="bool"/> and returns the <seealso cref="bool"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="decimal"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="bool"/>[,,,,,,,,] with the cast elements.</return>
        public static bool[,,,,,,,,] CastToBooleanArray(this decimal[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new bool[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = a[i0, i1, i2, i3, i4, i5, i6, i7, i8] != 0;
            return result;
        }
        #endregion
        
        #region Char[,,,,,,,,] -> T[,,,,,,,,]
        /// <summary>Casts all the elements of the <seealso cref="char"/>[,,,,,,,,] to <seealso cref="byte"/> and returns the <seealso cref="byte"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="char"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="byte"/>[,,,,,,,,] with the cast elements.</return>
        public static byte[,,,,,,,,] CastToByteArray(this char[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new byte[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (byte)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="char"/>[,,,,,,,,] to <seealso cref="short"/> and returns the <seealso cref="short"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="char"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="short"/>[,,,,,,,,] with the cast elements.</return>
        public static short[,,,,,,,,] CastToInt16Array(this char[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new short[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (short)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="char"/>[,,,,,,,,] to <seealso cref="int"/> and returns the <seealso cref="int"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="char"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="int"/>[,,,,,,,,] with the cast elements.</return>
        public static int[,,,,,,,,] CastToInt32Array(this char[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new int[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (int)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="char"/>[,,,,,,,,] to <seealso cref="long"/> and returns the <seealso cref="long"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="char"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="long"/>[,,,,,,,,] with the cast elements.</return>
        public static long[,,,,,,,,] CastToInt64Array(this char[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new long[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (long)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="char"/>[,,,,,,,,] to <seealso cref="sbyte"/> and returns the <seealso cref="sbyte"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="char"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="sbyte"/>[,,,,,,,,] with the cast elements.</return>
        public static sbyte[,,,,,,,,] CastToSByteArray(this char[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new sbyte[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (sbyte)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="char"/>[,,,,,,,,] to <seealso cref="ushort"/> and returns the <seealso cref="ushort"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="char"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="ushort"/>[,,,,,,,,] with the cast elements.</return>
        public static ushort[,,,,,,,,] CastToUInt16Array(this char[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new ushort[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (ushort)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="char"/>[,,,,,,,,] to <seealso cref="uint"/> and returns the <seealso cref="uint"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="char"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="uint"/>[,,,,,,,,] with the cast elements.</return>
        public static uint[,,,,,,,,] CastToUInt32Array(this char[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new uint[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (uint)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="char"/>[,,,,,,,,] to <seealso cref="ulong"/> and returns the <seealso cref="ulong"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="char"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="ulong"/>[,,,,,,,,] with the cast elements.</return>
        public static ulong[,,,,,,,,] CastToUInt64Array(this char[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new ulong[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (ulong)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="char"/>[,,,,,,,,] to <seealso cref="float"/> and returns the <seealso cref="float"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="char"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="float"/>[,,,,,,,,] with the cast elements.</return>
        public static float[,,,,,,,,] CastToSingleArray(this char[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new float[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (float)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="char"/>[,,,,,,,,] to <seealso cref="double"/> and returns the <seealso cref="double"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="char"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="double"/>[,,,,,,,,] with the cast elements.</return>
        public static double[,,,,,,,,] CastToDoubleArray(this char[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new double[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (double)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="char"/>[,,,,,,,,] to <seealso cref="decimal"/> and returns the <seealso cref="decimal"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="char"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="decimal"/>[,,,,,,,,] with the cast elements.</return>
        public static decimal[,,,,,,,,] CastToDecimalArray(this char[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new decimal[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (decimal)a[i0, i1, i2, i3, i4, i5, i6, i7, i8];
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="char"/>[,,,,,,,,] to <seealso cref="bool"/> and returns the <seealso cref="bool"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="char"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="bool"/>[,,,,,,,,] with the cast elements.</return>
        public static bool[,,,,,,,,] CastToBooleanArray(this char[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new bool[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = a[i0, i1, i2, i3, i4, i5, i6, i7, i8] != 0;
            return result;
        }
        #endregion
        
        #region Boolean[,,,,,,,,] -> T[,,,,,,,,]
        /// <summary>Casts all the elements of the <seealso cref="bool"/>[,,,,,,,,] to <seealso cref="byte"/> and returns the <seealso cref="byte"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="bool"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="byte"/>[,,,,,,,,] with the cast elements.</return>
        public static byte[,,,,,,,,] CastToByteArray(this bool[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new byte[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (byte)(a[i0, i1, i2, i3, i4, i5, i6, i7, i8] ? 1 : 0);
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="bool"/>[,,,,,,,,] to <seealso cref="short"/> and returns the <seealso cref="short"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="bool"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="short"/>[,,,,,,,,] with the cast elements.</return>
        public static short[,,,,,,,,] CastToInt16Array(this bool[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new short[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (short)(a[i0, i1, i2, i3, i4, i5, i6, i7, i8] ? 1 : 0);
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="bool"/>[,,,,,,,,] to <seealso cref="int"/> and returns the <seealso cref="int"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="bool"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="int"/>[,,,,,,,,] with the cast elements.</return>
        public static int[,,,,,,,,] CastToInt32Array(this bool[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new int[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (int)(a[i0, i1, i2, i3, i4, i5, i6, i7, i8] ? 1 : 0);
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="bool"/>[,,,,,,,,] to <seealso cref="long"/> and returns the <seealso cref="long"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="bool"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="long"/>[,,,,,,,,] with the cast elements.</return>
        public static long[,,,,,,,,] CastToInt64Array(this bool[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new long[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (long)(a[i0, i1, i2, i3, i4, i5, i6, i7, i8] ? 1 : 0);
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="bool"/>[,,,,,,,,] to <seealso cref="sbyte"/> and returns the <seealso cref="sbyte"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="bool"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="sbyte"/>[,,,,,,,,] with the cast elements.</return>
        public static sbyte[,,,,,,,,] CastToSByteArray(this bool[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new sbyte[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (sbyte)(a[i0, i1, i2, i3, i4, i5, i6, i7, i8] ? 1 : 0);
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="bool"/>[,,,,,,,,] to <seealso cref="ushort"/> and returns the <seealso cref="ushort"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="bool"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="ushort"/>[,,,,,,,,] with the cast elements.</return>
        public static ushort[,,,,,,,,] CastToUInt16Array(this bool[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new ushort[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (ushort)(a[i0, i1, i2, i3, i4, i5, i6, i7, i8] ? 1 : 0);
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="bool"/>[,,,,,,,,] to <seealso cref="uint"/> and returns the <seealso cref="uint"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="bool"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="uint"/>[,,,,,,,,] with the cast elements.</return>
        public static uint[,,,,,,,,] CastToUInt32Array(this bool[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new uint[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (uint)(a[i0, i1, i2, i3, i4, i5, i6, i7, i8] ? 1 : 0);
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="bool"/>[,,,,,,,,] to <seealso cref="ulong"/> and returns the <seealso cref="ulong"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="bool"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="ulong"/>[,,,,,,,,] with the cast elements.</return>
        public static ulong[,,,,,,,,] CastToUInt64Array(this bool[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new ulong[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (ulong)(a[i0, i1, i2, i3, i4, i5, i6, i7, i8] ? 1 : 0);
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="bool"/>[,,,,,,,,] to <seealso cref="float"/> and returns the <seealso cref="float"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="bool"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="float"/>[,,,,,,,,] with the cast elements.</return>
        public static float[,,,,,,,,] CastToSingleArray(this bool[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new float[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (float)(a[i0, i1, i2, i3, i4, i5, i6, i7, i8] ? 1 : 0);
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="bool"/>[,,,,,,,,] to <seealso cref="double"/> and returns the <seealso cref="double"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="bool"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="double"/>[,,,,,,,,] with the cast elements.</return>
        public static double[,,,,,,,,] CastToDoubleArray(this bool[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new double[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (double)(a[i0, i1, i2, i3, i4, i5, i6, i7, i8] ? 1 : 0);
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="bool"/>[,,,,,,,,] to <seealso cref="decimal"/> and returns the <seealso cref="decimal"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="bool"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="decimal"/>[,,,,,,,,] with the cast elements.</return>
        public static decimal[,,,,,,,,] CastToDecimalArray(this bool[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new decimal[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (decimal)(a[i0, i1, i2, i3, i4, i5, i6, i7, i8] ? 1 : 0);
            return result;
        }
        /// <summary>Casts all the elements of the <seealso cref="bool"/>[,,,,,,,,] to <seealso cref="char"/> and returns the <seealso cref="char"/>[,,,,,,,,].</summary>
        /// <param name="a">The <seealso cref="bool"/>[,,,,,,,,] whose elements to cast.</param>
        /// <return>The resulting <seealso cref="char"/>[,,,,,,,,] with the cast elements.</return>
        public static char[,,,,,,,,] CastToCharArray(this bool[,,,,,,,,] a)
        {
            var lengths = a.GetDimensionLengths();
            var result = new char[lengths[0], lengths[1], lengths[2], lengths[3], lengths[4], lengths[5], lengths[6], lengths[7], lengths[8]];
            for (int i0 = 0; i0 < lengths[0]; i0++)
                for (int i1 = 0; i1 < lengths[1]; i1++)
                    for (int i2 = 0; i2 < lengths[2]; i2++)
                        for (int i3 = 0; i3 < lengths[3]; i3++)
                            for (int i4 = 0; i4 < lengths[4]; i4++)
                                for (int i5 = 0; i5 < lengths[5]; i5++)
                                    for (int i6 = 0; i6 < lengths[6]; i6++)
                                        for (int i7 = 0; i7 < lengths[7]; i7++)
                                            for (int i8 = 0; i8 < lengths[8]; i8++)
                                                result[i0, i1, i2, i3, i4, i5, i6, i7, i8] = (char)(a[i0, i1, i2, i3, i4, i5, i6, i7, i8] ? 1 : 0);
            return result;
        }
        #endregion
    }
}