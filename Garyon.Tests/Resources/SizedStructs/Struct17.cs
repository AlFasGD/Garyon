using Garyon.Attributes;
using System.Runtime.InteropServices;

namespace Garyon.Tests.Resources.SizedStructs
{
    /// <summary>A struct with a size of 17 bytes.</summary>
    [StructLayout(LayoutKind.Sequential, Size = elementCount)]
    [Autogenerated]
    public unsafe struct Struct17 : ISizedStruct<Struct17>
    {
        private const int elementCount = 17;

        private fixed byte elements[elementCount];

        public static bool operator ==(Struct17 left, Struct17 right) => left.Equals(right);
        public static bool operator !=(Struct17 left, Struct17 right) => !(left == right);
        public static Struct17 operator ~(Struct17 s)
        {
            var result = new Struct17();
            for (int i = 0; i < elementCount; i++)
                result.elements[i] = (byte)~s.elements[i];
            return result;
        }

        public bool Equals(Struct17 other)
        {
            for (int i = 0; i < elementCount; i++)
                if (elements[i] != other.elements[i])
                    return false;
            return true;
        }
        public override bool Equals(object obj)
        {
            return Equals((Struct17)obj);
        }
    }
}
